#!/usr/bin/env ruby
# encoding: utf-8
#
# SCRIPT INFO 
# Name:       RTFM - Ruby Terminal File Manager
# Language:   Pure Ruby, best viewed in VIM
# Author:     Geir Isene <g@isene.com>
# Web_site:   http://isene.com/
# Github:     https://github.com/isene/RTFM
# License:    I release all copyright claims. This code is in the public domain.
#             Permission is granted to use, copy modify, distribute, and sell
#             this software for any purpose. I make no guarantee about the
#             suitability of this software for any purpose and I am not liable
#             for any damages resulting from its use. Further, I am under no
#             obligation to maintain or extend this software. It is provided 
#             on an 'as is' basis without any expressed or implied warranty.
@version    = "3.9"

# PRELIMINARIES
@help = <<HELPTEXT
RTFM - Ruby Terminal File Manager (https://github.com/isene/RTFM)

BASIC KEYS
 ?       = Show this help text
 r       = Refresh RTFM (recreates all windows. Use on terminal resize or when there is garbage somewhere)
 R       = Reload configuration (~/.rtfm.conf)
 W       = Write parameters to ~/.rtfm.conf 
           (@lsall, @lslong, @lsorder, @lsinvert, @border, @width, @preview, @tagged, @marks)
 q       = Quit
 Q       = QUIT (without writing changes to the config file)
 v       = Display RTFM version in bottom window/command bar

MOTION
 j/DOWN  = Go one item down in left pane (rounds to top)
 k/UP    = Go one item up in left pane (rounds to bottom)
 h/LEFT  = Go up one directory level
 l/RIGHT = Enter directory or open file (using run-mailcap or xdg-open)
           Use the key 'x' to force open using xdg-open (or run-mailcap) - used for opening html files
           in a browser rather than editing the file in your text editor
 PgDown  = Go one page down in left pane
 PgUp    = Go one page up in left pane
 END     = Go to last item in left pane
 HOME    = Go to first item in left pane

JUMPING AND MARKS
 m       = Mark current dir (persistent). Next letter is the name of the mark [a-zA-Z']
           The special mark "'" jumps to the last directory (makes toggling dirs easy)
           Press '-' and a letter to delete that mark
 M       = Show marked items in right pane
 '       = Jump to mark (next letter is the name of the mark [a-zA-Z'])
           The 5 latest directories visited are stored in marks 1-5 (1 being the very latest)
 ~       = Jump to Home directory
 >       = Follow symlink to the directory where the target resides

SEARCHING
 /       = Enter search string in bottom window to highlight matching items and jump to the first match
 \\       = Remove search pattern
 n       = Jump to the next item matched by '/'
 N       = Jump to the previous item matched by '/'
 g       = Run 'grep' to show files that contains the MATCH in current directory
 L       = Start 'locate' search for files, then use '#' to jump to desired line/directory
 Ctrl-l  = Locate files via fzf from the current directory down
           (fuzzy file finder must be installed https://github.com/junegunn/fzf)

TAGGING
 t       = Tag item (toggles)
 Ctrl-t  = Add items matching a pattern to list of tagged items (Ctrl-t and then . will tag all items)
 T       = Show currently tagged items in right pane
 u       = Untag all tagged items

MANIPULATE ITEMS
 p       = Put (copy) tagged items here
 P       = PUT (move) tagged items here
 s       = Create symlink to tagged items here
 d       = Delete selected item and tagged items. Press 'y' to confirm
 c       = Change/rename selected (adds command to bottom window)
 Ctrl-o  = Change ownership to user:group of selected and tagged items
 Ctrl-p  = Change permissions of selected and tagged items
           Format = rwxr-xr-x or 755 or rwx (applies the trio to user, group and others)
 z       = Extract tagged zipped archive to current directory
 Z       = Create zipped archive from tagged files/directories

DIRECTORY VIEWS
 a       = Show all (also hidden) items
 A       = Show long info per item (show item attributes)
 o       = Change the order/sorting of directories (circular toggle)
 i       = Invert/reverse the sorting
 O       = Show the Ordering in the bottom window (the full ls command)
 G       = Show git status for current directory
 H       = Do a cryptographic hash of the current directory with subdirs
           If a previous hash was made, compare and report if there has been any change
 I       = Show OpenAI's description of the selected item and its content (if available)
           You must have installed the ruby-openai gem and added your openai secret key
           in the .rtfm.conf (add `@ai = "your-secret-openai-key") for this to work.

RIGHT PANE
 ENTER   = Refresh the right pane
 TAB     = Next page of the preview (if doc long and ∇ in the bottom right)
 S-TAB   = Previous page (if you have moved down the document first - ∆ in the top right)
 w       = Change the width of the left/right panes (left pane ⇒ 20%, 30%, 40%, 50%, 60%)
 -       = (Minus sign) Toggle preview in right pane (turn it off for faster traversing of directories)
 _       = (Underscore) Toggle preview of images in right pane
 b       = Toggle syntax highlighting (and line numbering)

ADDITIONAL COMMANDS
 f       = Show only files in the left pane matching extension(s) (e.g. "txt" or "pdf,png,jpg")
 F       = Show only files matching a pattern (Ruby Regex) (e.g. "abc" or "ab.+12(\w3)+")
 B       = Toggle border
 :       = Enter "command mode" in bottom window (press ENTER to execute, press Ctrl-G to escape)
 ;       = Show command history in right pane
 y       = Copy path of selected item to primary selection (for pasting with middle mouse button)
 Y       = Copy path of selected item to clipboard
 Ctrl-y  = Copy content of right pane to clipboard
 S       = Show comprehensive System info (system, CPU, filesystem, latest dmesg messages)
 Ctrl-n  = Invoke navi (see https://github.com/denisidoro/navi) with any output in right window

COPYRIGHT: Geir Isene, 2020-3. No rights reserved. See http://isene.com for more.
HELPTEXT
def firstrun
  @firstrun = <<~FIRSTRUN

  Welcome to RTFM - the Ruby Terminal File Manager. This help text is shown on the first run.
  Next time you run RTFM, you can launch it from your terminal with a one letter command: "r"
  When launched this way, RTFM will also exit in the directory you are currently in.

  To benefit fully from all the features, you need to install some auxilliary software.
  On Ubuntu Linux you would use "apt install":

  Basic requirments is "x11-utils" and "xdotool":           apt install x11-utils xdotool
  Syntax highlighting of text uses "bat":                   apt install bat
  Viewing PDFs uses "pdftotext":                            apt install poppler-utils
  Viewing LibreOffice docs uses "odt2txt":                  apt install odt2txt
  Viewing MS docx	uses "docx2txt":                          apt install docx2txt
  Viewing MS pptx	uses "unzip":                             apt install unzip
  Viewing MS xlsx uses "ssconvert":                         apt install gnumeric
  Viewing MS doc/xls/ppt uses "catdoc, xls2csv and catppt": apt install catdoc
  Viewing Images uses "w3m and ImageMagick":                apt install w3m imagemagick
  Viewing Video thumbnails uses "ffmpegthumbnailer"         apt install ffmpegthumbnailer

  All of the above: 
  apt install x11-utils xdotool bat poppler-utils odt2txt docx2txt unzip gnumeric catdoc w3m imagemagick ffmpegthumbnailer

FIRSTRUN
  
  if not File.exist?(Dir.home+'/.rtfm.launch')
    @rtfmlaunch = <<RTFMLAUNCH
# This is the RTFM launcher (https://github.com/isene/RTFM)
function r { 
	f=$(mktemp)
  (
  set +e
	rtfm "$f"
  code=$?
  if [ "$code" != 0 ]; then
    rm -f "$f"
    exit "$code"
  fi
  )
  code=$?
  if [ "$code" != 0 ]; then
    return "$code"
  fi
  d=$(<"$f")
  rm -f "$f"
  cd "$d"
}
RTFMLAUNCH
    File.write(Dir.home+'/.rtfm.launch', @rtfmlaunch)
    @shell = File.basename(`echo "$SHELL"`.chomp)
    `echo "source ~/.rtfm.launch" >> .#{@shell}rc`
  end

  puts @firstrun
  puts "\n... hit ENTER to start RTFM. Hit ? inside RTFM to show the help text. Enjoy :-)"
  STDIN.gets
end
begin # BASIC SETUP
  require 'fileutils'
  require 'io/console'
  require 'io/wait'
  require 'date'
  require 'timeout'
  require 'curses'
  include  Curses

  firstrun unless File.exist?(Dir.home+'/.rtfm.conf')

  def cmd?(command)
    system("which #{command} > /dev/null 2>&1")
  end
  
  if cmd?('/usr/lib/w3m/w3mimgdisplay')
    @imgdisplay = "/usr/lib/w3m/w3mimgdisplay"
    @showimage = true
  else
    @showimage = false
  end
  @showimage = false unless (cmd?('xwininfo') and cmd?('xdotool'))
  
  cmd?('bat') ? @bat = "bat" : @bat = "batcat"

  STDIN.set_encoding(Encoding::UTF_8) # Set encoding for STDIN 

  ## Curses setup 
  Curses.init_screen
  Curses.start_color
  Curses.curs_set(0)
  Curses.noecho
  Curses.cbreak
  Curses.stdscr.keypad = true

  # INITIALIZE VARIABLES 
  ## These can be set by user in .rtfm.conf
  @lsbase     = "--group-directories-first" # Basic ls setup
  @lslong     = false # Set short form ls (toggled by pressing "l")
  @lsall      = ""    # Set "ls -a" to false (toggled by pressing "a" - sets it to "-a")
  @lsorder    = ""    # Change the order/sorting by pressing 'o' (circular toggle)
  @lsinvert   = ""    # Set to "-r" to reverse/invert sorting order
  @lsuser     = ""    # Set this variable in .rtfm.conf to any 'ls' switch you want to customize directory listings
  @width      = 4     # Set width of the left pane to the default ⅓ of the terminal width
  @history    = []    # Initialize the command line history array
  @border     = false
  @preview    = true
  @runmailcap = false # Set to 'true' in .rtfm.conf if you want to use run-mailcap instead of xdg-open
  @batuse     = true  # Use batcat for syntax highlighting
  ## These are automatically written on exit
  @marks      = {}    # Initialize (book)marks hash
  @hash       = {}    # Initialize the sha directory hashing
  @tagged     = []    # Initialize the tagged array - for collecting all tagged items
  ## These should not be set by user in .rtfm.conf
  @directory  = {}    # Initialize the directory hash for remembering directories visited
  @searched   = ""    # Initialize the active searched for items
  @lsfiles    = ""    # File types to show (initially set to all file types) - not saved on exit
  @lsmatch    = ""    # Files to match (initially set to matching all files) - not saved on exit
  @index      = 0     # Set chosen item to first on startup
  @cont       = ""
  @tagsize    = 0
  @navi       = ""
  @marks["'"] = Dir.pwd
  ## File type recognizers
  @imagefile  = /\.jpg$|\.JPG$|\.jpeg$|\.png$|\.bmp$|\.gif$|\.tif$|\.tiff$/
  @pptfile    = /\.ppt$/
  @xlsfile    = /\.xls$/
  @docfile    = /\.doc$/
  @docxfile   = /\.docx$/
  @xlsxfile   = /\.xlsx$/
  @pptxfile   = /\.pptx$/
  @oolofile   = /\.odt$|\.odc$|\.odp$|\.odg$/
  @pdffile    = /\.pdf$|\.ps$/
  ## Get variables from config file (written back to .rtf.conf upon exit via 'q')
  if File.exist?(Dir.home+'/.rtfm.conf')
    load(Dir.home+'/.rtfm.conf')
  end
  Dir.chdir(ARGV[0]) if Dir.exist?(ARGV[0]) and ARGV[0] !~ /\/tmp/
end
# CLASS EXTENSIONS
class Curses::Window 
  attr_accessor :fg, :bg, :attr, :text, :update, :pager, :pager_more, :pager_cmd, :locate, :nohistory
  # General extensions (see https://github.com/isene/Ruby-Curses-Class-Extension)
  def clr
    self.setpos(0, 0)
    self.maxy.times {self.deleteln()}
    self.refresh
    self.setpos(0, 0)
  end
  def fill # Fill window with color as set by :bg
    self.setpos(0, 0)
    self.bg = 0 if self.bg   == nil
    self.fg = 255 if self.fg == nil
    init_pair(self.fg, self.fg, self.bg)
    blank = " " * self.maxx
    self.maxy.times {self.attron(color_pair(self.fg)) {self << blank}}
    self.refresh
    self.setpos(0, 0)
  end
  def write # Write context of :text to window with attributes :attr
    self.bg = 0 if self.bg   == nil
    self.fg = 255 if self.fg == nil
    init_pair(self.fg, self.fg, self.bg)
    self.attr = 0 if self.attr == nil
    self.attron(color_pair(self.fg) | self.attr) { self << self.text }
    self.refresh
  end
  # RTFM specific extensions
end
# GENERIC FUNCTIONS 
def syntax_highlight(input) # SYNTAX HIGHLIGHTING FROM ANSI COLOR CODES
  color_ary  = color_parse(input)
  color_ary.each do | pair |
    begin
      fg   = pair[0].to_i
      atr  = pair[1].to_i
      atr == 1 ? atr = Curses::A_BOLD : atr = 0
      text = pair[2]
      text.gsub!(/\t/, '')
      init_pair(fg, fg, 0)
      @w_r.attron(color_pair(fg) | atr) { @w_r << text }
    rescue
    end
  end
end
def color_parse(input) # PARSE ANSI COLOR SEQUENCES
  input.gsub!(/\e\[\d;38;5;(\d+);*(\d*)m/, '¤¤\1¤¤\2¤¤')
  input.gsub!(/\e\[38;5;(\d+);*(\d*)m/, '¤¤\1¤¤\2¤¤')
  input.gsub!(/\e\[\d;38;2;(\d+);*(\d*);\d*m/, '¤¤\1¤¤\2¤¤')
  input.gsub!(/\e\[38;2;(\d+);*(\d*);\d*m/, '¤¤\1¤¤\2¤¤')
  input.gsub!(/\e\[\d+;(\d+);*(\d*)m/, '¤¤\1¤¤\2¤¤')
  input.gsub!(/\e\[0m/, "")
  color_array = input.split("¤¤")
  color_array = color_array.drop(1)
  #color_array.map! { |x| x || 0 }
  output = color_array.each_slice(3).to_a
  return output
end
def getchr # PROCESS KEY PRESSES
  # Note: Curses.getch blanks out @w_t
  # @w_l.getch makes Curses::KEY_DOWN etc not work
  # Therefore resorting to the generic method
  c = STDIN.getch(min: 0, time: 3)
  case c
  when "\e"    # ANSI escape sequences
    case STDIN.getc
    when '['   # CSI
      case STDIN.getc
      when 'A' then chr = "UP"
      when 'B' then chr = "DOWN"
      when 'C' then chr = "RIGHT"
      when 'D' then chr = "LEFT"
      when 'Z' then chr = "S-TAB"
      when '2' then chr = "INS"    ; chr = "C-INS"    if STDIN.getc == "^"
      when '3' then chr = "DEL"    ; chr = "C-DEL"    if STDIN.getc == "^"
      when '5' then chr = "PgUP"   ; chr = "C-PgUP"   if STDIN.getc == "^"
      when '6' then chr = "PgDOWN" ; chr = "C-PgDOWN" if STDIN.getc == "^"
      when '7' then chr = "HOME"   ; chr = "C-HOME"   if STDIN.getc == "^"
      when '8' then chr = "END"    ; chr = "C-END"    if STDIN.getc == "^"
      end
    when 'O'   # Set Ctrl+ArrowKey equal to ArrowKey; May be used for other purposes in the future
      case STDIN.getc
      when 'a' then chr = "C-UP"
      when 'b' then chr = "C-DOWN"
      when 'c' then chr = "C-RIGHT"
      when 'd' then chr = "C-LEFT"
      end
    end
  when "", "" then chr = "BACK"
  when "" then chr = "WBACK"
  when "" then chr = "LDEL"
  when "" then chr = "C-C"
  when "" then chr = "C-G"
  when "" then chr = "C-L"
  when "" then chr = "C-N"
  when "" then chr = "C-O"
  when "" then chr = "C-P"
  when "" then chr = "C-T"
  when "" then chr = "C-Y"
  when "\r" then chr = "ENTER"
  when "\t" then chr = "TAB"
  when /[[:print:]]/  then chr = c
  end
  return chr
end
def main_getkey # GET KEY FROM USER
  dir = Dir.pwd
  chr = getchr
  case chr
  # BASIC KEYS
  when '?' # Show helptext in right window 
    @w_r.fg = 249
    w_r_info(@help)
    @w_b.update = true
  when 'r' # Refresh all windows 
    @break = true
  when 'R' # Reload .rtfm.conf
    if File.exist?(Dir.home+'/.rtfm.conf')
      load(Dir.home+'/.rtfm.conf')
    end
    w_b_info(" Config reloaded")
  when 'W' # Write all parameters to .rtfm.conf
    @write_conf_all = true
    conf_write
    @w_b.update = true
  when 'q' # Exit 
    @tagged = []
    @write_conf = true
    exit 0
  when 'Q' # Exit without writing to .rtfm.conf
    @tagged = []
    system("printf \"\033]0;#{Dir.pwd}\007\"")
    @write_conf = false
    exit 0
  when 'v'
    w_b_info("RTFM version = #{@version} (latest RubyGems version is #{Gem.latest_version_for("rtfm-filemanager").version} - https://github.com/isene/RTFM)")
  # MOTION
  when 'DOWN', 'j', 'C-DOWN'
    var_resets
    @index = @index >= @max_index ? @min_index : @index + 1
    @w_r.update = true
    @w_b.update = true
  when 'UP', 'k', 'C-UP'
    var_resets
    @index = @index <= @min_index ? @max_index : @index - 1
    @w_r.update = true
    @w_b.update = true
  when 'LEFT', 'h', 'C-LEFT'
    var_resets
    cur_dir = Dir.pwd
    @directory[Dir.pwd] = @selected # Store this directory before leaving
    mark_latest
    Dir.chdir("..")
    @directory[Dir.pwd] = File.basename(cur_dir) unless @directory.key?(Dir.pwd)
    @w_r.update = true
    @w_b.update = true
  when 'RIGHT', 'l', 'C-RIGHT'
    var_resets
    @directory[Dir.pwd] = @selected # Store this directory before leaving
    mark_latest
    open_selected()
    @w_r.update = true
    @w_b.update = true
  when 'x'   # Force open with file opener (used to open HTML files in browser)
    var_resets
    @directory[Dir.pwd] = @selected # Store this directory before leaving
    mark_latest
    open_selected(true)
    @w_r.update = true
    @w_b.update = true
  when 'PgDOWN'
    var_resets
    @index += @w_l.maxy - 2
    @index = @max_index if @index > @max_index
    @w_r.update = true
    @w_b.update = true
  when 'PgUP'
    var_resets
    @index -= @w_l.maxy - 2
    @index = @min_index if @index < @min_index
    @w_r.update = true
    @w_b.update = true
  when 'END'
    var_resets
    @index = @max_index
    @w_r.update = true
    @w_b.update = true
  when 'HOME'
    var_resets
    @index = @min_index
    @w_r.update = true
    @w_b.update = true
  # JUMPING AND MARKS
  when 'm' # Set mark 
    marks_info
    m = STDIN.getc
    if m.match(/[\w']/)
      @marks[m] = Dir.pwd
    elsif m == "-"
      r = STDIN.getc
      @marks.delete(r)
    end
    marks_info
    @w_r.update = false
    @w_b.update = true
  when 'M' # Show marks 
    marks_info
    @w_r.update = false
    @w_b.update = true
  when "'" # Jump to mark 
    marks_info
    m = stdscr.getch.to_s
    if m.match(/[\w']/) and @marks[m]
      var_resets
      @directory[Dir.pwd] = @selected # Store this directory before leaving
      dir_before  = Dir.pwd
      begin
        Dir.chdir(@marks[m]) 
      rescue
        w_b_info(" No such directory")
      end
      mark_latest
      @marks["'"] = dir_before
    end
    @w_r.update = true
    @w_b.update = true
  when '~' # Go to home dir
    var_resets
    @directory[Dir.pwd] = @selected # Store this directory before leaving
    mark_latest
    Dir.chdir
    @w_r.update = true
    @w_b.update = true
  when '>' # Follow symlink
    @directory[Dir.pwd] = @selected # Store this directory before leaving
    mark_latest
    if File.symlink?(@selected) 
      begin
        Dir.chdir(File.dirname(File.readlink(@selected)))
      rescue
      end
    end
    @w_b.update = true
  # SEARCHING
  when '/' # Get search string to mark items that match the input 
    @w_b.nohistory = true
    @searched = w_b_getstr("/ ", "")
    l = `ls 2>/dev/null #{@lsbase} #{@lsall} #{@lsorder} #{@lsinvert} #{@lsuser}`.split
    m = l.each_index.select{|n| l[n] =~ /#{@searched}/}
    @index = m[0] unless m == []
    @index = 0 if @searched == ""
    @w_r.update = true
  when '\\' # Clear search string
    @searched = ""
  when 'n' # Jump to next occurence of search (after '/')
    l = `ls 2>/dev/null #{@lsbase} #{@lsall} #{@lsorder} #{@lsinvert} #{@lsuser}`.split
    m = l.each_index.select{|n| l[n] =~ /#{@searched}/}
    i = m.find { |n| n > @index }
    if i == nil
      @index = m.first
    else
      @index = i
    end
    @w_r.update = true
  when 'N' # Jump to previous occurence of search (after '/')
    l = `ls 2>/dev/null #{@lsbase} #{@lsall} #{@lsorder} #{@lsinvert} #{@lsuser}`.split
    m = l.each_index.select{|n| l[n] =~ /#{@searched}/}.reverse
    i = m.find { |n| n < @index }
    if i == nil
      @index = m.first
    else
      @index = i
    end
    @w_r.update = true
  when 'g' # Run 'grep' in the current directory
    cmd = w_b_getstr(": ", "grep -s MATCH *")
    w_b_exec(cmd)
  when 'L' # Run 'locate' and let user jump to a result (by '#') 
    cmd = w_b_getstr(": ", "locate ")
    w_b_exec(cmd)
    @w_r.locate = true
    @w_b.update = true
  when '#' # Jump to the line number in list of matches to 'locate' 
    if @w_r.locate
      jumpnr   = w_b_getstr("# ", "").to_i
      jumpline = @w_r.text.lines[jumpnr - 1]
      jumpdir  = jumpline[/\/[^\e]*/]
      unless Dir.exist?(jumpdir) 
        @searched = File.basename(jumpdir)
        jumpdir = File.dirname(jumpdir)
      end
      @directory[Dir.pwd] = @selected # Store this directory before leaving
      mark_latest
      Dir.chdir(jumpdir)
      @w_r.pager = 0
    end
    @w_b.update = true
  when 'C-L' # fzf integration (https://github.com/junegunn/fzf)
    begin
      jump     = `fzf`.chomp
    rescue
      w_b_info(" fzf not installed - see https://github.com/junegunn/fzf")
    end
    jumpdir  = File.dirname(jump)
    @searched = File.basename(jump)
    @directory[Dir.pwd] = @selected # Store this directory before leaving
    mark_latest
    Dir.chdir(jumpdir)
    @break = true
  # TAGGING
  when 't' # Add item to tagged list 
    item = "\"#{Dir.pwd}/#{@selected}\""
    if @tagged.include?(item)
      @tagged.delete(item)
      @tagsize -= File.size(item[1...-1])
    else
      @tagged.push(item)
      @tagsize += File.size(item[1...-1])
    end
    @index += 1
    @w_r.update = true
    @w_b.update = true
  when 'C-T' # Tag items matching a pettern
    @w_b.nohistory = true
    @tag = w_b_getstr("~ ", "")
    @w_r.update = true
    @w_b.update = true
  when 'T' # Show tagged list 
    @w_r.fg = 196
    tagged_info
    @w_r.update = false
    @w_b.update = true
  when 'u' # Clear tagged list 
    @tagged = []
    tagged_info
    @w_r.update = false
    @w_b.update = true
  # MANIPULATE ITEMS
  when 'p' # Copy tagged items here 
    copy_move_link("copy")
    @w_r.update = true
  when 'P' # Move tagged items here 
    copy_move_link("move")
    @w_r.update = true
  when 's' # Create symlink to tagged items here 
    copy_move_link("link")
    @w_r.update = true
  when 'd' # Delete items tagged and @selected 
    tagged_info
    w_b_info(" Delete selected and tagged? (press 'y' to delete)")
    begin
      @tagged.push("\"#{Dir.pwd}/#{@selected}\"")
      @tagged.uniq!
      deletes = @tagged.join(" ")
      if STDIN.getc == 'y'
        `rm -rf #{deletes} 2>/dev/null` 
        items_number = @tagged.length
        @tagged = []
        w_b_info("Deleted #{items_number} items: #{deletes}")
      else
        @w_b.update = true
      end
      @w_r.update = true
    rescue StandardError => err
      w_b_info(err.to_s)
    end
  when 'c' # Change/rename selected @selected 
    cmd = w_b_getstr(": ", "mv \"#{@selected}\" \"#{@selected}\"")
    el1 = cmd.sub(/mv \"(.*)\" \"(.*)\"/, '\1')
    el2 = cmd.sub(/mv \"(.*)\" \"(.*)\"/, '\2')
    begin
      if el1 == el2
        w_b_info(" Source and target are the same. No action done.")
      else
        w_b_exec(cmd + " 2>/dev/null")
      end
    rescue StandardError => err
      w_b_info(err.to_s)
    end
    @w_r.update = true
  when 'C-O' # Change ownerships
    require 'etc'
    gnm = Etc.getgrgid(File.stat(@selected).gid).name
    unm = Etc.getpwuid(File.stat(@selected).uid).name
    p   = "Change ownership of selected"
    p  += " and tagged" unless @tagged.empty?
    p  += ". Selected ownership (user:group) = "
    own = w_b_getstr(p, "#{unm}:#{gnm}").split(":")
    gnm, unm = own[0], own[1]
    begin
      gid = Etc.getgrnam(gnm).gid.to_i
      uid = Etc.getpwnam(unm).uid.to_i
      File.chown(uid, gid, @selected)
      @tagged.each {|t| File.chown(uid, gid, t[1...-1])} unless @tagged.empty? 
      w_b_info("Ownership changed to #{gnm}:#{unm}")
    rescue StandardError => err
      w_b_info(err.to_s)
    end
  when 'C-P' # Change permissions
    mode = @fspes[@index][1..9]
    p   = "Change permissions of selected"
    p  += " and tagged" unless @tagged.empty?
    p  += ". Selected permissions = "
    mode = w_b_getstr(p, mode)
    mode = mode * 3 if mode.length == 3 and mode.to_i == 0
    if mode.length == 9 and mode.to_i == 0
      x  = 0
      x += 400 if mode[0] == "r"
      x += 200 if mode[1] == "w"
      x += 100 if mode[2] == "x"
      x +=  40 if mode[3] == "r"
      x +=  20 if mode[4] == "w"
      x +=  10 if mode[5] == "x"
      x +=   4 if mode[6] == "r"
      x +=   2 if mode[7] == "w"
      x +=   1 if mode[8] == "x"
      mode = x
    end
    if mode.to_s.length == 3 and mode.to_i != 0
      mode = mode.to_s.to_i(8)
      begin
        File.chmod(mode, @selected)
        @tagged.each {|t| File.chmod(mode, t[1...-1])} unless @tagged.empty?
      rescue StandardError => err
        w_b_info(err.to_s)
      end
    else
      w_b_info("Not a valid permissions mode. Nothing changed.")
    end
  when 'z' # Unzip selected archive file
    cmd = w_b_getstr("Command = ", "tar xfz #{@tagged.first}")
    begin
      w_b_exec(cmd + " 2>/dev/null")
    rescue StandardError => err
      w_b_info(err.to_s)
    end
  when 'Z' # Create archive file
    arc = w_b_getstr("Archive name: ", "")
    cmd = w_b_getstr("Command = ", "tar cfz #{arc}.gz #{@tagged.join(" ")}")
    begin
      w_b_exec(cmd + " 2>/dev/null")
    rescue StandardError => err
      w_b_info(err.to_s)
    end
  # DIRECTORY VIEWS
  when 'a' # Show all items 
    @lsall == "" ? @lsall = "-a" : @lsall = ""
    @w_r.update = true
    @w_b.update = true
  when 'A' # Show all info for all items 
    @lslong = !@lslong
    @w_r.update = true
    @w_b.update = true
  when 'o' # Circular toggle the order/sorting of directory views
    case @lsorder
    when ""
      @lsorder = "-S"
      w_b_info(" Sorting by size, largest first")
    when "-S"
      @lsorder = "-t"
      w_b_info(" Sorting by modification time")
    when "-t"
      @lsorder = "-X"
      w_b_info(" Sorting by extension (alphabetically)")
    when "-X"
      @lsorder = ""
      w_b_info(" Normal sorting")
    end
    @w_r.update  = true
    @orderchange = true
  when 'i' # Invert the order/sorting of directory views
    case @lsinvert
    when ""
      @lsinvert = "-r"
      w_b_info(" Sorting inverted")
    when "-r"
      @lsinvert = ""
      w_b_info(" Sorting NOT inverted")
    end
    @w_r.update  = true
    @orderchange = true
  when 'O' # Show the Ordering in the bottom window (the full ls command)
    w_b_info(" Full 'ls' command: ls <@s> #{@lsbase} #{@lsall} #{@lsorder} #{@lsinvert} #{@lsuser}")
  when 'G' # Git status for selected item or current dir
    @w_r.fg = 214
    if File.exist?(".git")
      w_r_info(`git status 2>/dev/null`)
    else
      w_r_info("This is not a git repository.")
    end
    @w_r.update = false
    @w_b.update = true
  when 'H' # Compare with previous hash status or write hash status if no existing hash
    @w_r.fg = 213
    hashcmd = "\(find #{Dir.pwd} -type f -print0  | sort -z | xargs -0 sha1sum; find #{Dir.pwd}"\
              " \\( -type f -o -type d \\) -print0 | sort -z | xargs -0 stat -c '%n %a'\) | sha1sum | cut -c -40"
    begin
      hashdir = `#{hashcmd}`.chomp
    rescue StandardError => e
      w_r_info("Error: #{e.inspect}")
    end
    hashtime = DateTime.now.strftime "%Y-%m-%d %H:%M"
    if @hash.include?(Dir.pwd)
      if @hash[Dir.pwd][1] == hashdir
        w_b_info(" Hash for #{Dir.pwd} has NOT changed since #{hashtime} (#{hashdir})")
      else
        w_b_info(" Hash for #{Dir.pwd} has CHANGED since #{hashtime} (#{@hash[Dir.pwd][1]} -> #{hashdir})")
        @hash[Dir.pwd] = [hashtime, hashdir]
      end
    else
      hashtime = DateTime.now.strftime "%Y-%m-%d %H:%M"
      @hash[Dir.pwd] = [hashtime, hashdir]
      w_b_info(" New hash for #{Dir.pwd}: #{hashtime}: #{hashdir}")
    end
    @w_r.update = true
    @w_b.update = false
  when 'I' # OpenAI integration
    if @ai
      openai
    else
      w_b_info("No OpenAI key in config file. Add `@ai = 'your-secret-openai-key'` to .rtfm.conf")
    end
  # RIGHT PANE
  when 'ENTER' # Refresh right pane
    @w_r.fill # First clear the window, then clear any previously showing image
    image_show("clear") if @image; @image = false
    @w_r.update = true
    @w_b.update = true
  when 'TAB' # Start paging/Down one page
    if @w_r.pager == 1 and @w_r.pager_cmd != ""
      @w_r.text = `#{@w_r.pager_cmd} 2>/dev/null` 
    end
    if @w_r.pager_more
      @w_r.pager += 1
      pager_show 
    end
    @w_b.update = true
  when 'S-TAB' # Up one page
    if @w_r.pager > 1
      @w_r.pager -= 1
      pager_show
    end
    @w_b.update = true
  when 'w' # Change width of left/right panes
    @width += 1
    @width  = 2 if @width == 7
    @break = true
    @w_r.update = true
    @w_b.update = true
  when '-' # Toggle content view in right pane
    @preview = !@preview
    @preview ? p = "On" : p = "Off"
    w_b_info("Preview = " + p)
    getch
    @break = true
  when '_' # Toggle image view
    @showimage = !@showimage
    @showimage ? i = "On" : i = "Off"
    w_b_info("Image preview = " + i)
    getch
    @break = true
  when 'b' # Toggle syntax highlighting (via bat/batcat)
    @batuse = !@batuse
    @break  = true
  # ADDITIONAL COMMANDS
  when 'f' # Filter out filetypes not matching @lsfiles
    loop do
      @lsfiles = w_b_getstr("Filetype(s) to show: ", @lsfiles)
      break if @lsfiles.match(/^$|\w+(,\w+)*$/)
    end
    w_b_info(nil)
  when 'F' # Filter out files not matching @lsmatch
    @lsmatch = w_b_getstr("Files will match RegEx: ", @lsmatch)
    w_b_info(nil)
  when 'B' # Toggle borders
    @border = !@border
    @break = true
  when ':' # Enter "command mode" in the bottom window - tries to execute the given command 
    @w_r.nohistory = false
    cmd = w_b_getstr(": ", "")
    w_b_exec(cmd)
  when ';' # Show command history 
    w_r_info("Command history (latest on top):\n\n" + @history.join("\n"))
    @w_b.update = true
  when 'y', 'Y' # Copy path of selected item
    if @selected == nil
      w_b_info(" No selected item path to copy")
    else
      path = Dir.pwd + "/" + @selected
      if chr == 'Y'
        clip = "xclip -selection clipboard" 
        w_b_info(" Path copied to clipboard")
      else
        clip = "xclip"
        w_b_info(" Path copied to primary selection (paste with middle mouse button)")
      end
      system("echo -n '#{path}' | #{clip}")
    end
  when 'C-Y' # Copy right pane to clipboard
    clip = "xclip -selection clipboard" 
    @cont.gsub!(/	¤¤\d+¤¤\d*¤¤/, '')
    @cont.gsub!(/^¤¤\d+¤¤\d*¤¤ */, '')
    @cont.gsub!(/¤¤\d+¤¤\d*¤¤/, '')
    @cont.gsub!(/	/, '')
    @cont.gsub!(/   (\d)/, '\1')
    @cont.gsub!(/\[(\d+;)+\d+m/, '')
    @cont = @cont.inspect
    @cont.gsub!('\"', '"')
    @cont = @cont [1...-1]
    w_b_info(" Right pane copied to clipboard")
    system("echo -n '#{@cont}' | #{clip}")
  when 'S' # Show comprehensive system info
    sysinfo
  when 'C-N' # navi integration (https://github.com/denisidoro/navi)
    begin
      @navi = `navi`
    rescue
      w_b_info(" navi not installed - see https://github.com/denisidoro/navi")
    end
    @break = true
  when '@' # Enter "Ruby debug"
    @w_b.nohistory = false
    cmd = w_b_getstr("◆ ", "")
    @w_b.clr
    @w_b.refresh
    @w_b.update = true
    @w_r.clr
    info = "Command: #{cmd}\n\n"
    begin
      info += eval(cmd).to_s
    rescue StandardError => e
      info += "Error: #{e.inspect}"
    end
    w_r_info(info)
    @w_r.update = false
  end
  if @w_r.update == true
    @w_r.locate     = false
    @w_r.pager      = 0
    @w_r.pager_more = false
  end
  begin
    @w_r.update = true if dir != Dir.pwd
  rescue
  end
end
def conf_write
  if File.exist?(Dir.home+'/.rtfm.conf')
    conf = File.read(Dir.home+'/.rtfm.conf')
  else
    conf = ""
  end
  conf.sub!(/^@marks.*{.*}\n/, "") 
  conf += "@marks = #{@marks}\n"
  conf.sub!(/^@hash.*{.*}\n/, "") 
  conf += "@hash = #{@hash}\n"
  conf.sub!(/^@tagged.*\[.*\]\n/, "")
  conf += "@tagged = #{@tagged}\n"
  if @write_conf_all
    conf.sub!(/^@lslong.*\n/, "") 
    conf += "@lslong = #{@lslong}\n"
    conf.sub!(/^@lsall.*\n/, "") 
    conf += "@lsall = \"#{@lsall}\"\n"
    conf.sub!(/^@lsorder.*\n/, "") 
    conf += "@lsorder = \"#{@lsorder}\"\n"
    conf.sub!(/^@lsinvert.*\n/, "") 
    conf += "@lsinvert = \"#{@lsinvert}\"\n"
    conf.sub!(/^@width.*\n/, "") 
    conf += "@width = #{@width}\n"
    conf.sub!(/^@border.*\n/, "") 
    conf += "@border = #{@border}\n"
    conf.sub!(/^@preview.*\n/, "") 
    conf += "@preview = #{@preview}\n"
    conf.sub!(/^@showimage.*\n/, "") 
    conf += "@showimage = #{@showimage}\n"
    @w_r.fg = 249
    w_r_info("Configuration written to .rtfm.conf:\n\n" + conf)
  end
  File.write(Dir.home+'/.rtfm.conf', conf)
end
def ansifix(text) # Format [[fg, attr, text]]
  output = ""
  text.each do |e|
    ansi    = "\e[38;5;#{e[0]}"
    ansi   += ";1" if e[1] == 1
    ansi   += "m"
    output += ansi + e[2].gsub(/\n/, "\n#{ansi}")
  end
  return output
end
def mark_latest
  @marks["5"] = @marks["4"]
  @marks["4"] = @marks["3"]
  @marks["3"] = @marks["2"]
  @marks["2"] = @marks["1"]
  @marks["1"] = @marks["'"]
  @marks["'"] = Dir.pwd
end
def get_files(win) # The core of the directory listings
  ls_cmd  = "ls 2>/dev/null #{@lsbase} #{@lsall} #{@lsorder} #{@lsinvert} #{@lsuser}" # Get files in current directory 
  ls_cmd += @selected_safe if win == "right"
  @cfiles = `#{ls_cmd} --color`.split("\n")
  @files  = @cfiles.map {|f| f.sub(/^\e\[.*\dm(..*$)/, '\1').sub(/\e.+/, '')}
  ls_cmd += " -H " if win == "right"
  ls_cmd += %q[ -lh --time-style="long-iso" | awk '{printf "%s%s%s%11s%6s%6s", $1, " " $3, ":" $4,$6,$7,$5"\n"}']
  @fspes  = `#{ls_cmd}`.split("\n").drop(1)
  if @lsfiles != "" or @lsmatch != ""
    lsf      = @lsfiles.split(",").map! {|e| e.strip}
    dir_cmd  = "ls 2>/dev/null -d "
    dir_cmd += @selected_safe + "/" if win == "right"
    dir_cmd += "*/"
    dirs     = `#{dir_cmd}`.split("/\n")
    dirs.map!{|d| d.sub!(/.*\//, '')} if win == "right"
    @files   = @files - dirs
    @fspes   = @fspes - dirs
    @files.select! {|f| lsf.any? {|l| File.extname(f) == ".#{l}"}} if @lsfiles != ""
    @fspes.select! {|f| lsf.any? {|l| File.extname(f) == ".#{l}"}} if @lsfiles != ""
    @files.select! {|f| f =~ /#{@lsmatch}/} if @lsmatch != ""
    @fspes.select! {|f| f =~ /#{@lsmatch}/} if @lsmatch != ""
    @files   = dirs + @files
    @fspes   = dirs + @fspes
    @w_r.update = true
  end
end
# TOP WINDOW FUNCTIONS 
def w_t_info # SHOW INFO IN @w_t
  text  = " " + ENV['USER'].to_s + "@" + `hostname 2>/dev/null`.to_s.chop + ": " + Dir.pwd + "/"
  unless @selected == nil
    text += @selected
    text += " → #{File.readlink(@selected)}" if File.symlink?(@selected) 
  end
  begin
    text += " (#{@fspes[@index]})" 
  rescue
  end
  begin
    if @selected.match(@imagefile)
      text += `identify #{@selected_safe} | awk '{printf " [%s %s %s %s] ", $3,$2,$5,$6}' 2>/dev/null` if cmd?('identify')
    elsif @selected.match(@pdffile)
      info  = `pdfinfo #{@selected_safe} 2>/dev/null`
      text += " [" + info.match(/Pages:.*?(\d+)/)[1] 
      text += " "  + info.match(/Page size:.*\((.*)\)/)[1] + " pages] "
    end
  rescue
  end
  if Dir.exist?(@selected.to_s)
    begin
      text += " [" + Dir.glob(@selected+"/*").count.to_s + " " + Dir.children(@selected).count.to_s + "]"
    rescue
      text += " [Denied]"
    end
  end
  text  = text[1..(@w_t.maxx - 3)] + "…" if text.length + 3 > @w_t.maxx 
  text += " " * (@w_t.maxx - text.length) if text.length < @w_t.maxx
  @w_t.clr
  @w_t.text = text
  @w_t.write
end
# LEFT WINDOW FUNCTIONS 
def list_dir(active) # LIST CONTENT OF A DIRECTORY (BOTH active AND RIGHT WINDOWS)
  ix = 0; t = 0
  if active 
    win = @w_l
    ix = @index - @w_l.maxy/2 if @index > @w_l.maxy/2 and @files.size > @w_l.maxy - 1
  else
    win = @w_r
    @cont = ""
  end
  while ix < @files.size and t < win.maxy do
    str  = @files[ix]
    cstr = @cfiles[ix]
    active ? str_path = str : str_path = "#{@selected}/#{str}" 
    begin # Add items matching @tag to @tagged
      if str.match(/#{@tag}/) and @tag != false
        @tagged.push("\"#{Dir.pwd}/#{str}\"")
        @tagged.uniq!
      end
    rescue
    end
    fg = 7; bold = 0; bg = 0 # Set default color
    fl = color_parse(cstr)
    fg, bold = fl[0][0].to_i, fl[0][1].to_i unless fl[0] == nil
    init_pair(fg, fg, bg)
    file_marker = color_pair(fg)
    file_marker = file_marker | Curses::A_BOLD if bold == 1
    if ix == @index and active
      @w_l << "→ "
      file_marker = file_marker | Curses::A_UNDERLINE 
      wixy = win.cury
    else
      active ? @w_l << "  " : @w_r << " "
    end
    file_marker = file_marker | Curses::A_REVERSE if @tagged.include?("\"#{Dir.pwd}/#{str_path}\"")
    file_marker = file_marker | Curses::A_BLINK if str.match(/#{@searched}/) and @searched != ""
    File.directory?(str_path) ? dir = "/" : dir = ""
    File.symlink?(str_path) ? link = "@" : link = ""
    str = @fspes[ix] + "  " + str if @lslong
    if str.length > win.maxx - 4
      base_name   = File.basename(str, ".*")
      base_length = base_name.length
      ext_name    = File.extname(str)
      ext_length  = ext_name.length
      nbl = win.maxx - 5 - ext_length # nbl: new_base_length
      str = base_name[0..nbl] + "…" + ext_name
    end
    if !active and ix == win.maxy - 1 # Add indicator of more at bottom @w_r list 
      win << " ..."
      return
    end
    str += link + dir
    @cont += str + "\n" unless active # Adds to content in right win for copying
    win.attron(file_marker) { win << str } # Implement color/bold to the item
    win.clrtoeol
    win << "\n"
    ix += 1; t  += 1
  end
  (win.maxy - win.cury).times {win.deleteln()} # Clear to bottom of window
  if active
    init_pair(242, 242, 0)
    if @index > @w_l.maxy/2
      @w_l.setpos(0, @w_l.maxx - 1)
      @w_l.attron(color_pair(242) | Curses::A_DIM) { @w_l << "∆" }
    end
    if @files.length > @w_l.maxy - 1 and @files.length > @index + @w_l.maxy/2 - 1
      @w_l.setpos(@w_l.maxy - 2, @w_l.maxx - 1)
      @w_l.attron(color_pair(242) | Curses::A_DIM) { @w_l << "∇" }
    end
  end
end
def open_selected(html = nil) # OPEN SELECTED ITEM (when pressing RIGHT)
  if File.directory?(@selected) # Rescue for permission error
    begin
      mark_latest
      Dir.chdir(@selected)
    rescue
    end
  else
    begin
      if File.read(@selected).force_encoding("UTF-8").valid_encoding? and not html
        system("exec $EDITOR #{@selected_safe}")
      else
          if @runmailcap
            Thread.new { system("run-mailcap #{@selected_safe} 2>/dev/null") }
          else
            Thread.new { system("xdg-open #{@selected_safe} 2>/dev/null") }
          end
        end
      @break = true
    rescue
    end
  end
end
def copy_move_link(type) # COPY OR MOVE TAGGED ITEMS (COPY IF "keep == true")
  @tagged.uniq!
  @tagged.each do | item |
    item = item[1..-2]
    dest = Dir.pwd
    dest += "/" + File.basename(item)
    dest += "1" if File.exist?(dest)
    while File.exist?(dest)
      dest = dest.chop + (dest[-1].to_i + 1).to_s
    end
    begin
      case type
      when "copy"
        FileUtils.cp_r(item, dest)
        w_b_info(" Item(s) copied here.")
      when "move"
        FileUtils.mv(item, dest)
        w_b_info(" Item(s) moved here.")
      when "link"
        FileUtils.ln_s(item, dest)
        w_b_info(" Item(s) symlinked here.")
      end
    rescue StandardError => err
      w_b_info(err.to_s)
    end
  end
  @tagged = []
end
# RIGHT WINDOW FUNCTIONS 
def w_r_show # SHOW CONTENTS IN THE RIGHT WINDOW
  if @w_r.update
    @w_r.clr # First clear the window, then clear any previously showing image
    image_show("clear") if @image; @image = false
  end
  begin # Determine the specific programs to open/show content 
    if @w_r.pager > 0
      pager_show 
    elsif File.directory?(@selected)
      get_files("right")
      list_dir(false)
    # TEXT 
    elsif File.read(@selected).force_encoding("UTF-8").valid_encoding? and @w_r.pager == 0
      if @batuse
        begin # View the file as text if it is utf-8
          @w_r.pager_cmd = "#{@bat} -n --color=always #{@selected_safe} 2>/dev/null"
          @w_r.text      = `#{@bat} -n --color=always --line-range :#{@w_r.maxy} #{@selected_safe} 2>/dev/null`
          pager_start
          syntax_highlight(@w_r.text)
        rescue
          @w_r.pager_cmd  = "cat #{@selected_safe} 2>/dev/null"
          w_r_doc
        end
      else
        @w_r.pager_cmd  = "cat #{@selected_safe} 2>/dev/null"
        w_r_doc
      end
    # PDF 
    elsif @selected.match(@pdffile) and @w_r.pager == 0
      @w_r.pager_cmd  = "pdftotext #{@selected_safe} - 2>/dev/null | less"
      @w_r.text       = `pdftotext -f 1 -l 4 #{@selected_safe} - 2>/dev/null`
      pager_start 
      @w_r << @w_r.text
    # OPEN/LIBREOFFICE 
    elsif @selected.match(@oolofile) and @w_r.pager == 0
      @w_r.pager_cmd  = "odt2txt #{@selected_safe} 2>/dev/null"
      w_r_doc
    # MS DOCX
    elsif @selected.match(@docxfile) and @w_r.pager == 0
      @w_r.pager_cmd  = "docx2txt #{@selected_safe} - 2>/dev/null"
      w_r_doc
    # MS XLSX
    elsif @selected.match(@xlsxfile) and @w_r.pager == 0
      @w_r.pager_cmd  = "ssconvert -O 'separator=   ' -T Gnumeric_stf:stf_assistant #{@selected_safe} fd://1 2>/dev/null"
      w_r_doc
    # MS PPTX
    elsif @selected.match(@pptxfile) and @w_r.pager == 0
      @w_r.pager_cmd  = %Q[unzip -qc #{@selected_safe} | ruby -e '$stdin.each_line { |i| i.force_encoding("ISO-8859-1").scan(/<a:t>(.+?)<\\/a:t>/).each { |j| puts(j) } }' 2>/dev/null]
      w_r_doc
    # MS DOC 
    elsif @selected.match(@docfile) and @w_r.pager == 0
      @w_r.pager_cmd  = "catdoc #{@selected_safe} 2>/dev/null"
      w_r_doc
    # MS XLS 
    elsif @selected.match(@xlsfile) and @w_r.pager == 0
      @w_r.pager_cmd  = "xls2csv #{@selected_safe} 2>/dev/null"
      w_r_doc
    # MS PPT 
    elsif @selected.match(@pptfile) and @w_r.pager == 0
      @w_r.pager_cmd  = "catppt #{@selected_safe} 2>/dev/null"
      w_r_doc
    # IMAGES 
    elsif @selected.match(@imagefile)
      image_show(@selected_safe)
      @image = true
    # VIDEOS (THUMBNAILS) 
    elsif @selected.match(/\.mpg$|\.mpeg$|\.avi$|\.mov$|\.mkv$|\.mp4$/)
      begin
        tmpfile = "/tmp/" + File.basename(@selected_safe,".*")
        `ffmpegthumbnailer -s 1200 -i #{@selected_safe} -o /tmp/rtfm_video_tn.jpg 2>/dev/null`
        image_show("/tmp/rtfm_video_tn.jpg")
        @image = true
      rescue
      end
    end
  rescue
  end
  pager_add_markers # Add page markers, up and/or down
  @w_r.update = false
  @w_r.refresh
end
def w_r_doc # GET FULL CONTENT TO PAGE
  @w_r.text = `#{@w_r.pager_cmd} 2>/dev/null`
  pager_start 
  @w_r << @w_r.text
end
def w_r_info(info) # SHOW INFO IN THE RIGHT WINDOW
  image_show("clear") if @image; @image = false
  @w_r.clr
  @w_r.refresh
  w_r_width = Curses.cols - (Curses.cols * @width / 10) - 2
  info.gsub!(/(.{1,#{w_r_width}})( +|$\n?)|(.{1,#{w_r_width}})/, "\\1\\3\n")
  @w_r.text      = info
  @w_r.pager_cmd = ""
  pager_start
  pager_show
  @w_r.update = false
end
def marks_info # SHOW MARKS IN RIGHT WINDOW
  @w_r.fg = 183
  @marks = @marks.sort.to_h
  info = "MARKS:\n"
  unless @marks.empty?
    @marks.each do |mark, dir|
      info += "#{mark} = #{dir}\n"
    end
  else
    info += "(none)"
  end
  w_r_info(info)
end
def tagged_info # SHOW THE LIST OF TAGGED ITEMS IN @w_r
  info = "TAGGED:\n"
  @tagged.empty? ? info += "(None)" : info += @tagged.join("\n")
  w_r_info(info)
end
def image_show(image)# SHOW THE SELECTED IMAGE IN THE RIGHT WINDOW
  # Pass "clear" to clear the window for previous image
  return unless @showimage
  begin
    terminfo    = `xwininfo -id $(xdotool getactivewindow 2>/dev/null) 2>/dev/null`
    term_w      = terminfo.match(/Width: (\d+)/)[1].to_i
    term_h      = terminfo.match(/Height: (\d+)/)[1].to_i
    char_w      = term_w / Curses.cols
    char_h      = term_h / Curses.lines
    img_x       = char_w * (Curses.cols * @width / 10 + 1)
    img_y       = char_h * 2
    img_max_w   = char_w * (Curses.cols - Curses.cols * @width / 10 - 2)
    img_max_h   = char_h * (Curses.lines - 4)
    if image == "clear"
      `clear`
      img_x     -= char_w
      img_max_w += char_w + 2
      img_max_h += 2
      `echo "6;#{img_x};#{img_y};#{img_max_w};#{img_max_h};\n4;\n3;" | #{@imgdisplay} 2>/dev/null`
    else
      img_w,img_h = `identify -format "%[fx:w]x%[fx:h]" #{image} 2>/dev/null`.split('x')
      img_w       = img_w.to_i
      img_h       = img_h.to_i
      if img_w > img_max_w
        img_h = img_h * img_max_w / img_w 
        img_w = img_max_w
      end
      if img_h > img_max_h
        img_w = img_w * img_max_h / img_h
        img_h = img_max_h
      end
      `echo "0;1;#{img_x};#{img_y};#{img_w};#{img_h};;;;;\"#{image}\"\n4;\n3;" | #{@imgdisplay} 2>/dev/null`
    end
  rescue
    @w_r.clr
    @w_r << "Error showing image"
  end
end
def pager_start # START PAGING
  @w_r.pager = 1
  if @w_r.text.lines.count > @w_r.maxy - 2
    @w_r.pager_more = true
  end
  @cont = @w_r.text # For copying right win
end
def pager_show # SHOW THE CURRENT PAGE CONTENT
  @w_r.setpos(0,0)
  beg_l = (@w_r.pager - 1) * (@w_r.maxy - 5)
  end_l = beg_l + @w_r.maxy - 2
  input = @w_r.text.lines[beg_l..end_l].join() + "\n"
  input.lines.count > @w_r.maxy - 2 ? @w_r.pager_more = true : @w_r.pager_more = false
  if @w_r.text.match(/^\e\[/)
    syntax_highlight(input)
  else
    if @w_r.fg == nil
      init_pair(255, 255, 0)
      @w_r.fg = 255
    else 
      init_pair(@w_r.fg, @w_r.fg, 0)
    end
    @w_r.attr = 0 if @w_r.attr == nil
    @w_r.attron(color_pair(@w_r.fg) | @w_r.attr) { @w_r << input }
  end
  @cont = input # For copying right win
  (@w_r.maxy - @w_r.cury).times {@w_r.deleteln()} # Clear to bottom of window
  pager_add_markers
  @w_r.refresh
end
def pager_add_markers # ADD MARKERS TOP/RIGHT & BOTTOM/RIGHT TO SHOW PAGING AS RELEVANT
  if @w_r.pager > 1
    @w_r.setpos(0, @w_r.maxx - 2)
    @w_r << " ∆"
  end
  if @w_r.pager_more
    @w_r.setpos(@w_r.maxy - 1, @w_r.maxx - 2)
    @w_r << " ∇"
  end
end
def var_resets # RESET PAGER VARIABLES
    @pager      = 0
    @pager_more = false
    @pager_cmd  = ""
    @info       = false
end
def openai # INTERFACE TO OPENAI
  begin
    require "ruby/openai"
  rescue
    w_b_info("To make openai work in RTFM, you need to do `gem install ruby-openai` and add this to your .rtfm.conf: $ai = 'your-secret-openai-key'")
  end
  
  client = OpenAI::Client.new(access_token: @ai)

  c = @w_r.text
  c = "" unless c
  @w_r.fg = 214
  w_r_info("OpenAI description...")

  f  = Dir.pwd + "/" + @selected
  p  = "What is this "
  File.directory?(@selected) ? p += "directory: " : p+= "file: "
  p += "#{f}? "
  p += "Give a brief summary of its content: " + c unless File.directory?(@selected) and c == ""

  response = client.completions( parameters: { model: "text-davinci-003", prompt: p, max_tokens: 200 })
  if response["error"]["message"] == ""
    text = "OpenAI description:\n" + response["choices"][0]["text"]
  else
    text = response["error"]["message"]
  end

  @w_r.fg = 229
  w_r_info(text)
end
def sysinfo
  begin
    @w_r.clr
    @w_r.pager_cmd = ""
    uname    = `uname -o`.chomp + "  "
    uname   += `uname -r`.chomp + "  "
    uname   += `uname -v`.chomp + "  "
    uname   += `uname -p`.chomp + "  "
    uname   += `awk -F '"' '/PRETTY/ {print $2}' /etc/os-release` + "\n"
    text     = [[253, 1, uname]]
    system   = "Shell & Terminal: " + `echo $SHELL`.sub(/.*\//, '').chomp + ", " + `echo $TERM`.chomp + "   "
    packages = `pacman -Q 2>/dev/null | wc -l`.chomp
    packages = `dpkg-query -l 2>/dev/null | grep -c '^.i'`.chomp if packages == "0"
    packages = "Unrecognized" if packages == "0"
    system  += "Packages: " + packages + "\n"
    system  += "Desktop: " + `awk '/^DesktopNames/' /usr/share/xsessions/* | sed 's/DesktopNames=//g' | \\
                sed 's/\\;/\\n/g' | sed '/^$/d' | sort -u | sed ':a;N;$!ba;s/\\n/, /g'`.chomp + "/"
    system  += `grep 'gtk-theme-name' ~/.config/gtk-3.0/* | sed 's/gtk-theme-name=//g' | \\
                sed 's/-/ /g'`.sub(/.*:/, '') + "\n"
    text    += [[251, 0, system]]
    cpu      = "CPUs = " + `nproc`.chop + "  "
    cpuinfo  = `lscpu`
    cpu     += cpuinfo[/^.*Model name:\s*(.*)/, 1] + "  "
    cpu     += "Max: " + cpuinfo[/^.*CPU max MHz:\s*(.*)/, 1][/(.*),.*/, 1] + "MHz  "
    cpu     += "Min: " + cpuinfo[/^.*CPU min MHz:\s*(.*)/, 1][/(.*),.*/, 1] + "MHz\n\n"
    text    += [[154, 0, cpu]]
    mem      = `free -h`  + "\n"
    text    += [[229, 0, mem]]
    ps       = `ps -eo comm,pid,user,pcpu,pmem,stat --sort -pcpu,-pmem | head` + "\n"
    text    += [[195, 0, ps]]
    disk     = `df -H | head -8`
    text    += [[172, 0, disk]]
    dmesg    = "\nDMESG (latest first):\n"
    dmesg   += `dmesg | tail -6`.split("\n").sort.reverse.join("\n")
    text    += [[219, 0, dmesg]]
    w_r_info(ansifix(text))
  rescue
    w_r_info("Unable to show system info")
  end
end
# BOTTOM WINDOW FUNCTIONS 
def w_b_info(info) # SHOW INFO IN @W_B
  @w_b.clr
  @w_b.fg, @w_b.bg = 250, 238
  if info == nil
    info      = ": for command (use @s for selected item, @t for tagged items) - press ? for help" 
    info      = " Showing only files matching '#{@lsmatch}'" if @lsmatch != ""
    info      = " Showing only file type '#{@lsfiles}'" if @lsfiles != ""
    info      = " Showing only file types '#{@lsfiles}'" if @lsfiles =~ /,/
    info     += " and only files matching '#{@lsmatch}'" if @lsfiles != "" and @lsmatch != ""
    info      = " Tagged #{@tagged.size} files (#{(@tagsize.to_f/1000000).round(2)}MB)" unless @tagged.empty?
    @w_b.fg, @w_b.bg = 250, 88  if @lsfiles != ""
    @w_b.fg, @w_b.bg = 250, 21  if @lsmatch != ""
    @w_b.fg, @w_b.bg = 250, 55  if @lsfiles != "" and @lsmatch != ""
  end
  info      = info[1..(@w_b.maxx - 3)] + "…" if info.length + 3 > @w_b.maxx 
  info     += " " * (@w_b.maxx - info.length) if info.length < @w_b.maxx
  @w_b.text = info
  @w_b.write
  @w_b.update = false
end
def w_b_getstr(pretext, text) # A SIMPLE READLINE-LIKE ROUTINE
  Curses.curs_set(1)
  Curses.echo
  stk = 0
  @history.insert(stk, text)
  pos = @history[stk].length
  chr = ""
  while chr != "ENTER"
    @w_b.setpos(0,0)
    init_pair(250, 250, 238)
    text = pretext + @history[stk]
    text += " " * (@w_b.maxx - text.length) if text.length < @w_b.maxx
    @w_b.attron(color_pair(250)) { @w_b << text }
    @w_b.setpos(0,pretext.length + pos)
    @w_b.refresh
    chr = getchr
    if chr == 'C-G' or chr == 'C-C'
      Curses.curs_set(0)
      Curses.noecho
      @w_b.update = true
      return "" 
    end
    case chr
    when 'UP'
      unless @w_b.nohistory
        unless stk == @history.length - 1
          stk += 1 
          pos = @history[stk].length
        end
      end
    when 'DOWN'
      unless @w_b.nohistory
        unless stk == 0
          stk -= 1 
          pos = @history[stk].length
        end
      end
    when 'RIGHT'
      pos += 1 unless pos > @history[stk].length
    when 'LEFT'
      pos -= 1 unless pos == 0
    when 'HOME'
      pos = 0
    when 'END'
      pos = @history[stk].length
    when 'DEL'
      @history[stk][pos] = ""
    when 'BACK'
      unless pos == 0
        pos -= 1
        @history[stk][pos] = ""
      end
    when 'WBACK'
      unless pos == 0
        until @history[stk][pos - 1] == " " or pos == 0
          pos -= 1
          @history[stk][pos] = ""
        end
        if @history[stk][pos - 1] == " "
          pos -= 1
          @history[stk][pos] = ""
        end
      end
    when 'LDEL'
      @history[stk] = ""
      pos = 0
    when 'TAB' # Tab completion of dirs and files
      p1 = pos - 1
      c  = @history[stk][0..(p1)].sub(/^.* /, '')
      p0 = p1 - c.length
      compl = File.expand_path(c)
      compl += "/" if Dir.exist?(compl)
      clist = Dir.glob(compl + "*")
      unless compl == clist[0].to_s and clist.length == 1
        if clist.length == 1
          compl = clist[0].to_s
        else
          ix = clist.find_index(compl)
          ix = 0 if ix == nil
          sel_item = ""
          begin
            Curses.curs_set(0)
            Curses.noecho
            @w_r.clr
            @w_r << "Completion list:\n\n"
            clist.each.with_index do |item, index|
              if index == ix
                @w_r.attron(Curses::A_BLINK) { @w_r << item }
                sel_item = item
              else
                @w_r << item
              end
              @w_r << "\n"
            end
            @w_r.refresh
            ix == clist.length ? ix = 0 : ix += 1
          end while getchr == 'TAB'
          compl = sel_item
          @w_r.clr
          Curses.curs_set(1)
          Curses.echo
        end
      end
      @history[stk].sub!(c,compl)
      pos = pos - c.length + compl.length
    when /^.$/
      @history[stk].insert(pos,chr)
      pos += 1
    end
    while STDIN.ready?
      chr = STDIN.getc
      @history[stk].insert(pos,chr)
      pos += 1
    end
  end
  curstr = @history[stk]
  @history.shift if @w_b.nohistory
  unless @w_b.nohistory
    @history.uniq!
    @history.compact!
    @history.delete("")
  end
  Curses.curs_set(0)
  Curses.noecho
  return curstr
end
def w_b_exec(cmd) # EXECUTE COMMAND FROM @W_B
  # Subsitute any '@s' with the selected item, @t with tagged items
  # 'rm @s' deletes the selected item, 'rm @t' deletes tagged items
  return if cmd == ""
  @s = "\"#{Dir.pwd}/#{@selected}\""
  cmd.gsub!(/@s/, @s)
  @t = @tagged.join(" ")
  cmd.gsub!(/@t/, @t)
  if cmd.match(/^cd /)
    cmd.sub!(/^cd (\S*).*/, '\1')
    Dir.chdir(cmd) if Dir.exist?(cmd)
    return
  end
  begin
    status = Timeout::timeout(15) {
      @w_r.clr
      begin
        @w_r.pager_cmd = "#{cmd} | #{@bat} -n --color=always 2>/dev/null"
        @w_r.text = `#{@w_r.pager_cmd}`
      rescue
        @w_r.pager_cmd = "#{cmd} 2>/dev/null"
        @w_r.text = `#{@w_r.pager_cmd}`
      end
      unless @w_r.text == "" or @w_r.text == nil
        pager_start
        pager_show
        @w_r.update = false
      else
        @w_r.update = true
      end
    }
  rescue
    w_b_info(" Failed to execute command (#{cmd})")
  end
end

# MAIN PROGRAM 
loop do # OUTER LOOP - CATCHING REFRESHES VIA 'r'
  @break        = false # Initialize @break variable (set if user hits 'r')
  @image        = false # Set the image flag to false (set if image is displayed in @w_r)
  @tag          = false # Set pattern tagging to nothing
  @orderchange  = false
  begin # Create the four windows/panels 
    if @border
      Curses.stdscr.bg = 236 # Use for borders
      Curses.stdscr.fill
    else
      Curses.stdscr.clear
      Curses.stdscr.refresh
    end
    maxx = Curses.cols
    maxy = Curses.lines
    # Curses::Window.new(h,w,y,x)
    @w_t = Curses::Window.new(1, 0, 0, 0)
    @w_b = Curses::Window.new(1, 0, maxy - 1, 0)
    @w_l = Curses::Window.new(maxy - 3, (maxx * @width / 10) - 1, 2, 0)
    @w_r = Curses::Window.new(maxy - 4, maxx - (maxx * @width / 10), 2, maxx * @width / 10)
    @w_p = Curses::Window.new(1, maxx - (maxx * @width / 10), maxy - 2, maxx * @width / 10)
    @w_p.fg, @w_p.bg = 255, 0
    @w_p.refresh
    @w_t.fg, @w_t.bg = 232, 249
    @w_t.attr        = Curses::A_BOLD
    @w_b.fg, @w_b.bg = 250, 238
    @w_b.update = true
    @w_r.update = true
    @w_r.pager  = 0
    @w_r.pager_more = false
    dir_old     = Dir.pwd
    lsall_old   = @lsall
    unless @tagged.empty?
      tagged_info
      @w_r.update = false
    end
    @change     = true
    @change_tag = true # For future need to force @change
    loop do # INNER, CORE LOOP 
      begin # Jump to home dir if current dir is externally removed
        Dir.pwd
      rescue
        Dir.chdir
      end
      get_files("left")
      if Dir.pwd != dir_old
        if @directory.key?(Dir.pwd)
          @selected = @directory[Dir.pwd]
          @index    = @files.index(@selected)
        else
          @index    = 0
        end
      end
      dir_old    = Dir.pwd
      @index     = 0 if @index == nil
      index_old  = @index
      if @orderchange # Change in ordering must be handled
        @index        = @files.index(@selected)
        @orderchange  = false
      end
      @index          = @files.index(@selected) if @lsall != lsall_old # Change in showing all items must be handled
      @index          = index_old if @files.index(@selected) == nil    # If item no longer is shown
      @min_index      = 0
      @max_index      = @files.size - 1
      @index          = @max_index if @index > @max_index  # If deleted many items
      @index          = 0 if @index < 0
      @selected       = @files[@index]                     # Get text of selected item
      sel_old         = @selected_safe
      @selected_safe  = "\"#{@selected}\""                 # Make it safe for commands
      @selected_safe == sel_old ? @change = false : @change = true
      @change         = true if @change_tag; @change_tag = false
      if @change
        system("printf \"\033]0;RTFM: #{Dir.pwd}\007\"")   # Set Window title to path 
        # Top window (info line) 
        w_t_info
      end
      @w_l.setpos(0,0)
      list_dir(true)
      @w_l.refresh
      # Bottom window (command line) Before @w_r to avoid image dropping out on startup
      w_b_info(nil) if @w_b.update
      # Left and right windows (browser & content viewer)
      if @w_r.update and @preview
        w_r_show
        @w_r.fg = 255
      end
      unless @navi == ""
        w_r_info(@navi)
        @w_r.update = false
        @navi = ""
      end
      Curses.curs_set(1); Curses.curs_set(0) # Clear residual cursor from editing files 
      @tag = false       # Clear tag pattern
      lsall_old = @lsall
      main_getkey        # Get key from user 
      break if Curses.cols != maxx or Curses.lines != maxy # break on terminal resize 
      break if @break    # Break to outer loop, redrawing windows, if user hit 'r'
    end
  ensure # On exit: close curses, clear terminal 
    @write_conf_all = false
    conf_write if @write_conf # Write marks to config file
    image_show("clear")
    close_screen
    # If launched via the script "r", return current dir and "r" will cd to that
    begin
      File.write(ARGV[0], Dir.pwd) if ARGV[0] and ARGV[0].match(/\/tmp/)
    rescue
    end
  end
end

# vim: set sw=2 sts=2 et fdm=syntax fdn=2 fcs=fold\:\ :
