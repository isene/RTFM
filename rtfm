#!/usr/bin/env ruby
# encoding: utf-8

# SCRIPT INFO 
# Name:       RTFM - Ruby Terminal File Manager
# Language:   Pure Ruby, best viewed in VIM
# Author:     Geir Isene <g@isene.com>
# Web_site:   http://isene.com/
# Github:     https://github.com/isene/RTFM
# License:    I release all copyright claims. This code is in the public domain.
#             Permission is granted to use, copy modify, distribute, and sell
#             this software for any purpose. I make no guarantee about the
#             suitability of this software for any purpose and I am not liable
#             for any damages resulting from its use. Further, I am under no
#             obligation to maintain or extend this software. It is provided 
#             on an 'as is' basis without any expressed or implied warranty.

# PRELIMINARIES
@help = <<HELPTEXT
RTFM - Ruby Terminal File Manager (https://github.com/isene/RTFM)

BASIC KEYS
 ?      = Show this help text
 r      = Refresh RTFM (recreates all windows. Use on terminal resize or when there is garbage somewhere)
 R      = Reload configuration (~/.rtfm.conf)
 W      = Write parameters to ~/.rtfm.conf (@lsall, @lslong, @border, @width, @preview, @tagged, @marks)
 q      = Quit
 Q      = QUIT (without writing changes to the config file)

MOTION
 DOWN   = Go one item down in left pane (rounds to top)
 UP     = Go one item up in left pane (rounds to bottom)
 LEFT   = Go up one directory level
 RIGHT  = Enter directory or open file (using run-mailcap or xdg-open)
 PgDown = Go one page down in left pane
 PgUp   = Go one page up in left pane
 END    = Go to last item in left pane
 HOME   = Go to first item in left pane

JUMPING AND MARKS
 m      = Mark current dir (persistent). Next letter is the name of the mark [a-zA-Z']
          The special mark "'" jumps to the last directory (makes toggling dirs easy)
          Press '-' and a letter to delete that mark
 M      = Show marked items in right pane
 '      = Jump to mark (next letter is the name of the mark [a-zA-Z'])
 h      = Jump to Home directory
 f      = Follow symlink to the directory where the target resides
 L      = Start 'locate' search for files, then use '#' to jump to desired line/directory

TAGGING
 t      = Tag item (toggles)
 Ctrl-t = Add items matching a pattern to list of tagged items (Ctrl-t and then . will tag all items)
 T      = Show currently tagged items in right pane
 u      = Untag all tagged items

MANIPULATE ITEMS
 p      = Put (copy) tagged items here
 P      = PUT (move) tagged items here
 s      = Create symlink to tagged items here
 d      = Delete selected item and tagged items. Press 'd' to confirm
 c      = Change/rename selected (adds command to bottom window)

DIRECTORY VIEWS
 a      = Show all (also hidden) items
 l      = Show long info per item (show item attributes)
 o      = Change the order/sorting of directories (circular toggle)
 i      = Invert/reverse the sorting
 G      = Show git status for current directory

RIGHT PANE
 ENTER  = Refresh the right pane
 TAB    = Next page of the preview (if doc long and ∇ in the bottom right)
 S-TAB  = Previous page (if you have moved down the document first - ∆ in the top right)
 w      = Change the width of the left/right panes (left pane ⇒ ⅓ ⇒ ¼ ⇒ ⅕ ⇒ ⅙ ⇒ ½ ⇒ ⅓)
 -      = Toggle preview in right pane (turn it off for faster traversing of directories)

ADDITINAL COMMANDS
 /      = Enter search string in bottom window to highlight matching items
 :      = Enter "command mode" in bottom window
 ;      = Show command history in right pane

COPYRIGHT: Geir Isene, 2020. No rights reserved. See http://isene.com for more.
HELPTEXT
begin # BASIC SETUP
  require 'fileutils'
  require 'io/console'
  require 'curses'
  include  Curses

  @w3mimgdisplay = "/usr/lib/w3m/w3mimgdisplay"
  STDIN.set_encoding(Encoding::UTF_8) # Set encoding for STDIN 
  LScolors = `echo $LS_COLORS` # Import LS_COLORS 

  ## Curses setup 
  Curses.init_screen
  Curses.start_color
  Curses.curs_set(0)
  Curses.noecho
  Curses.cbreak
  Curses.stdscr.keypad = true

  # INITIALIZE VARIABLES 
  ## These can be set by user in .rtfm.conf
  @lsbase     = "--group-directories-first" # Basic ls setup
  @lslong     = false # Set short form ls (toggled by pressing "l")
  @lsall      = ""    # Set "ls -a" to false (toggled by pressing "a" - sets it to "-a")
  @lsorder    = ""    # Change the order/sorting by pressing 'o' (circular toggle)
  @lsinvert   = ""    # Set to "-r" to reverse/invert sorting order
  @lsuser     = ""    # Set this variable in .rtfm.conf to any 'ls' switch you want to customize directory listings
  @width      = 3     # Set width of the left pane to the default ⅓ of the terminal width
  @history    = []    # Initialize the command line history array
  @border     = false
  @preview    = true
  @runmailcap = false # Set to 'true' in .rtfm.conf if you want to use run-mailcap instead of xdg-open
  ## These are automatically written on exit
  @marks      = {}    # Initialize (book)marks hash
  @tagged     = []    # Initialize the tagged array - for collecting all tagged items
  ## These should not be set by user in .rtfm.conf
  @directory  = {}    # Initialize the directory hash for remembering directories visited
  @searched   = ""    # Initialize the active searched for items
  @index      = 0     # Set chosen item to first on startup
  @marks["'"] = Dir.pwd
  ## File type recognizers
  @imagefile  = /\.jpg$|\.JPG$|\.jpeg$|\.png$|\.bmp$|\.gif$|\.tif$|\.tiff$/
  @pptfile    = /\.ppt$/
  @xlsfile    = /\.xls$/
  @docfile    = /\.doc$/
  @ooxmlfile  = /\.docx$|\.xlsx$|\.pptx$/
  @oolofile   = /\.odt$|\.odc$|\.odp$|\.odg$/
  @pdffile    = /\.pdf$|\.ps$/
  ## Get variables from config file (written back to .rtf.conf upon exit via 'q')
  if File.exist?(Dir.home+'/.rtfm.conf')
    load(Dir.home+'/.rtfm.conf')
  end
end
class Curses::Window # CLASS EXTENSION 
  attr_accessor :fg, :bg, :attr, :text, :update, :pager, :pager_more, :pager_cmd, :locate, :nohistory 
  # General extensions (see https://github.com/isene/Ruby-Curses-Class-Extension)
  def clr
    self.setpos(0, 0)
    self.maxy.times {self.deleteln()}
    self.refresh
    self.setpos(0, 0)
  end
  def fill # Fill window with color as set by :bg
    self.setpos(0, 0)
    self.bg = 0 if self.bg   == nil
    self.fg = 255 if self.fg == nil
    init_pair(self.fg, self.fg, self.bg)
    blank = " " * self.maxx
    self.maxy.times {self.attron(color_pair(self.fg)) {self << blank}}
    self.refresh
    self.setpos(0, 0)
  end
  def write # Write context of :text to window with attributes :attr
    self.bg = 0 if self.bg   == nil
    self.fg = 255 if self.fg == nil
    init_pair(self.fg, self.fg, self.bg)
    self.attr = 0 if self.attr == nil
    self.attron(color_pair(self.fg) | self.attr) { self << self.text }
    self.refresh
  end
  # RTFM specific extensions
end
# GENERIC FUNCTIONS 
def get_ls_color(type) # GET THE COLOR FOR THE FILETYPE FROM IMPORTED LS_COLORS
  bold    = 0
  begin
    color = LScolors.match(/#{type}=\d*;\d*;(\d*)/)[1]
    bold  = 1 if LScolors.match(/#{type}=\d*;\d*;\d*;1/)
  rescue
    color = 7 # Default color
  end
  return color.to_i, bold
end
def color_parse(input) # PARSE ANSI COLOR SEQUENCES
  input.gsub!( /\e\[\d;38;5;(\d+)m/, '%-%\1%-%')
  input.gsub!( /\e\[38;5;(\d+)m/, '%-%\1%-%')
  input.gsub!( /\e\[0m/, "\t")
  color_array = input.split("%-%")
  color_array = color_array.drop(1)
  output = color_array.each_slice(2).to_a
  return output
end
def getchr # PROCESS KEY PRESSES
  # Note: Curses.getch blanks out @w_t
  # @w_l.getch makes Curses::KEY_DOWN etc not work
  # Therefore resorting to the generic method
  c = STDIN.getch(min: 0, time: 5)
  case c
  when "\e"    # ANSI escape sequences
    case $stdin.getc
    when '['   # CSI
      case $stdin.getc
      when 'A' then chr = "UP"
      when 'B' then chr = "DOWN"
      when 'C' then chr = "RIGHT"
      when 'D' then chr = "LEFT"
      when 'Z' then chr = "S-TAB"
      when '2' then chr = "INS"    ; STDIN.getc
      when '3' then chr = "DEL"    ; STDIN.getc
      when '5' then chr = "PgUP"   ; STDIN.getc
      when '6' then chr = "PgDOWN" ; STDIN.getc
      when '7' then chr = "HOME"   ; STDIN.getc
      when '8' then chr = "END"    ; STDIN.getc
      end
    end
  when "", "" then chr = "BACK"
  when "" then chr = "WBACK"
  when "" then chr = "LDEL"
  when "" then chr = "C-T"
  when "\r" then chr = "ENTER"
  when "\t" then chr = "TAB"
  when /./  then chr = c
  end
  return chr
end
def main_getkey # GET KEY FROM USER
  dir = Dir.pwd
  chr = getchr
  case chr
  # BASIC KEYS
  when '?' # Show helptext in right window 
    w_r_info(@help)
  when 'r' # Refresh all windows 
    @break = true
  when 'R' # Reload .rtfm.conf
    if File.exist?(Dir.home+'/.rtfm.conf')
      load(Dir.home+'/.rtfm.conf')
    end
    w_b_info(" Config reloaded")
    @w_b.update = false
  when 'W' # Write all parameters to .rtfm.conf
    @write_conf_all = true
    conf_write
  when 'q' # Exit 
    system("printf \"\033]0;#{Dir.pwd}\007\"")
    @write_conf = true
    exit 0
  when 'Q' # Exit without writing to .rtfm.conf
    system("printf \"\033]0;#{Dir.pwd}\007\"")
    @write_conf = false
    exit 0
  # MOTION
  when 'DOWN'
    var_resets
    @index = @index >= @max_index ? @min_index : @index + 1
    @w_r.update = true
  when 'UP'
    var_resets
    @index = @index <= @min_index ? @max_index : @index - 1
    @w_r.update = true
  when 'LEFT'
    var_resets
    cur_dir = Dir.pwd
    @directory[Dir.pwd] = @selected # Store this directory before leaving
    @marks["'"] = Dir.pwd
    Dir.chdir("..")
    @directory[Dir.pwd] = File.basename(cur_dir) unless @directory.key?(Dir.pwd)
    @w_r.update = true
  when 'RIGHT'
    var_resets
    @directory[Dir.pwd] = @selected # Store this directory before leaving
    @marks["'"] = Dir.pwd
    open_selected()
    @w_r.update = true
  when 'PgDOWN'
    var_resets
    @index += @w_l.maxy - 2
    @index = @max_index if @index > @max_index
    @w_r.update = true
  when 'PgUP'
    var_resets
    @index -= @w_l.maxy - 2
    @index = @min_index if @index < @min_index
    @w_r.update = true
  when 'END'
    var_resets
    @index = @max_index
    @w_r.update = true
  when 'HOME'
    var_resets
    @index = @min_index
    @w_r.update = true
  # JUMPING AND MARKS
  when 'm' # Set mark 
    marks_info
    m = STDIN.getc
    if m.match(/[\w']/)
      @marks[m] = Dir.pwd
    elsif m == "-"
      r = STDIN.getc
      @marks.delete(r)
    end
    marks_info
    @w_r.update = false
  when 'M' # Show marks 
    @marks = @marks.sort.to_h
    marks_info
    @w_r.update = false
  when "'" # Jump to mark 
    marks_info
    m = STDIN.getc
    if m.match(/[\w']/) and @marks[m]
      var_resets
      @directory[Dir.pwd] = @selected # Store this directory before leaving
      dir_before  = Dir.pwd
      begin
        Dir.chdir(@marks[m]) 
      rescue
        w_b_info(" No such directory")
      end
      @marks["'"] = dir_before
    end
    @w_r.update = true
  when 'h' # 
    var_resets
    @directory[Dir.pwd] = @selected # Store this directory before leaving
    @marks["'"] = Dir.pwd
    Dir.chdir
    @w_r.update = true
  when 'f' # Follow symlink
    @directory[Dir.pwd] = @selected # Store this directory before leaving
    @marks["'"] = Dir.pwd
    if File.symlink?(@selected) 
      Dir.chdir(File.dirname(File.readlink(@selected)))
    end
  when 'L' # Run 'locate' and let user jump to a result (by '#') 
    cmd = w_b_getstr(": ", "locate ")
    w_b_exec(cmd)
    @w_r.locate = true
  when '#' # Jump to the line number in list of matches to 'locate' 
    if @w_r.locate
      jumpnr   = w_b_getstr("# ", "").to_i
      jumpline = @w_r.text.lines[jumpnr - 1]
      jumpdir  = jumpline[/\/[^\e]*/]
      unless Dir.exist?(jumpdir) 
        @searched = File.basename(jumpdir)
        jumpdir = File.dirname(jumpdir)
      end
      @directory[Dir.pwd] = @selected # Store this directory before leaving
      @marks["'"] = Dir.pwd
      Dir.chdir(jumpdir)
      @w_r.pager = 0
    end
  # TAGGING
  when 't' # Add item to tagged list 
    item = "\"#{Dir.pwd}/#{@selected}\""
    if @tagged.include?(item)
      @tagged.delete(item)
    else
      @tagged.push(item)
    end
    @index += 1
    tagged_info
    @w_r.update = false
  when 'C-T' # Tag items matching a pettern
    @w_b.nohistory = true
    @tag = w_b_getstr("~ ", "")
    @w_r.update = true
  when 'T' # Show tagged list 
    tagged_info
    @w_r.update = false
  when 'u' # Clear tagged list 
    @tagged = []
    tagged_info
    @w_r.update = false
  # MANIPULATE ITEMS
  when 'p' # Copy tagged items here 
    copy_move_link("copy")
    @w_r.update = true
  when 'P' # Move tagged items here 
    copy_move_link("move")
    @w_r.update = true
  when 's' # Create symlink to tagged items here 
    copy_move_link("link")
    @w_r.update = true
  when 'd' # Delete items tagged and @selected 
    tagged_info
    w_b_info(" Delete selected and tagged? (press 'd' again to delete)")
    begin
      @tagged.push("\"#{Dir.pwd}/#{@selected}\"")
      @tagged.uniq!
      deletes = @tagged.join(" ")
      `rm -rf #{deletes}` if STDIN.getc == 'd'
      items_number = @tagged.length
      @tagged = []
      w_b_info("Deleted #{items_number} items: #{deletes}")
      @w_r.update = true
    rescue StandardError => err
      w_b_info(err.to_s)
    end
  when 'c' # Change/rename selected @selected 
    cmd = w_b_getstr(": ", "mv \"#{@selected}\" \"#{@selected}\"")
    w_b_exec(cmd)
    @w_r.update = true
  # DIRECTORY VIEWS
  when 'a' # Show all items 
    @lsall == "" ? @lsall = "-a" : @lsall = ""
    @w_r.update = true
  when 'l' # Show long info for all items 
    @lslong = !@lslong
    @w_r.update = true
  when 'o'
    case @lsorder
    when ""
      @lsorder = "-S"
      w_b_info(" Sorting by size, largest first")
    when "-S"
      @lsorder = "-t"
      w_b_info(" Sorting by modification time")
    when "-t"
      @lsorder = "-X"
      w_b_info(" Sorting by extension (alphabetically)")
    when "-X"
      @lsorder = ""
      w_b_info(" Normal sorting")
    end
    @w_r.update = true
  when 'i'
    case @lsinvert
    when ""
      @lsinvert = "-r"
      w_b_info(" Sorting inverted")
    when "-r"
      @lsinvert = ""
      w_b_info(" Sorting NOT inverted")
    end
    @w_r.update = true
  when 'G' # Git status for selected item or current dir
    if File.exist?(".git")
      w_r_info(`git status 2>/dev/null`)
    else
      w_r_info("This is not a git repository.")
    end
    @w_r.update = false
  # RIGHT PANE
  when 'ENTER' # Refresh right pane
    @w_r.update = true
  when 'TAB' # Start paging
    if @w_r.pager == 1 and @w_r.pager_cmd != ""
      @w_r.text = `#{@w_r.pager_cmd}` 
    end
    if @w_r.pager_more
      @w_r.pager += 1
      pager_show 
    end
  when 'S-TAB' # Up one page
    if @w_r.pager > 1
      @w_r.pager -= 1
      pager_show
    end
  when 'w' # Change width of left/right panes
    @width += 1
    @width  = 2 if @width == 7
    @break = true
  when '-'
    @preview = !@preview
    @break = true
  # ADDITIONAL COMMANDS
  when '/' # Get search string to mark items that match # 
    @w_b.nohistory = true
    @searched = w_b_getstr("/ ", "")
    @w_r.update = true
  when ':' # Enter "command mode" in the bottom window - tries to execute the given command 
    @w_r.nohistory = false
    cmd = w_b_getstr(": ", "")
    w_b_exec(cmd)
  when ';' # Show command history 
    w_r_info("Command history (latest on top):\n\n" + @history.join("\n"))
  when '@' # Enter "Ruby debug"
    @w_b.nohistory = true
    cmd = w_b_getstr("◆ ", "")
    @w_r.clr
    @w_r << "Command: #{cmd}\n\n"
    @w_r.refresh
    begin
      eval(cmd)
    rescue StandardError => e
      w_r_info("Error: #{e.inspect}")
    end
    @w_r.update = false
  end
  if @w_r.update == true
    @w_r.locate     = false
    @w_r.pager      = 0
    @w_r.pager_more = false
  end
  @w_r.update = true if dir != Dir.pwd
end
def conf_write
  if File.exist?(Dir.home+'/.rtfm.conf')
    conf = File.read(Dir.home+'/.rtfm.conf')
  else
    conf = ""
  end
  conf.sub!(/^@marks.*{.*}\n/, "") 
  conf += "@marks = #{@marks}\n"
  conf.sub!(/^@tagged.*\[.*\]\n/, "")
  conf += "@tagged = #{@tagged}\n"
  if @write_conf_all
    conf.sub!(/^@lslong.*\n/, "") 
    conf += "@lslong = #{@lslong}\n"
    conf.sub!(/^@lsall.*\n/, "") 
    conf += "@lsall = \"#{@lsall}\"\n"
    conf.sub!(/^@width.*\n/, "") 
    conf += "@width = #{@width}\n"
    conf.sub!(/^@border.*\n/, "") 
    conf += "@border = #{@border}\n"
    conf.sub!(/^@preview.*\n/, "") 
    conf += "@preview = #{@preview}\n"
    w_r_info("Press W again to write this to .rtfm.conf:\n\n" + conf)
    if getchr == 'W'
      w_b_info(" Parameters written to .rtfm.conf")
      @w_b.update = false
      @w_r.update = true
    else
      w_b_info(" Config NOT updated")
      @w_b.update = false
      @w_r.update = true
      return
    end
  end
  File.write(Dir.home+'/.rtfm.conf', conf)
end
# TOP WINDOW FUNCTIONS 
def w_t_info # SHOW INFO IN @w_t
  text  = " " + ENV['USER'].to_s + "@" + `hostname`.to_s.chop + ": " + Dir.pwd + "/"
  unless @selected == nil
    text += @selected
    text += " → #{File.readlink(@selected)}" if File.symlink?(@selected) 
  end
  begin
    text += " (#{@fspes[@index]})" 
  rescue
  end
  begin
    if @selected.match(@imagefile)
      text += `identify #{@selected_safe} | awk '{printf " [%s %s %s %s] ", $3,$2,$5,$6}' 2>/dev/null`
    elsif @selected.match(@pdffile)
      info  = `pdfinfo #{@selected_safe} 2>/dev/null`
      text += " [" + info.match(/Pages:.*?(\d+)/)[1] 
      text += " "  + info.match(/Page size:.*\((.*)\)/)[1] + " pages] "
    end
  rescue
  end
  if Dir.exist?(@selected.to_s)
    begin
      text += " [" + Dir.glob(@selected+"/*").count.to_s + " " + Dir.children(@selected).count.to_s + "]"
    rescue
      text += " [Denied]"
    end
  end
  text  = text[1..(@w_t.maxx - 3)] + "…" if text.length + 3 > @w_t.maxx 
  text += " " * (@w_t.maxx - text.length) if text.length < @w_t.maxx
  @w_t.clr
  @w_t.text = text
  @w_t.write
end
# LEFT WINDOW FUNCTIONS 
def list_dir(active) # LIST CONTENT OF A DIRECTORY (BOTH active AND RIGHT WINDOWS)
  ix = 0; t = 0
  if active 
    win = @w_l
    ix = @index - @w_l.maxy/2 if @index > @w_l.maxy/2 and @files.size > @w_l.maxy
  else
    win = @w_r
  end
  while ix < @files.size and t < win.maxy do
    str = @files[ix]
    active ? str_path = str : str_path = "#{@selected}/#{str}" 
    begin # Add items matching @tag to @tagged
      if str.match(/#{@tag}/) and @tag != false
        @tagged.push("\"#{Dir.pwd}/#{str}\"")
        @tagged.uniq!
      end
    rescue
    end
    # Determine the filetype of the item 
    ftype = ""
    ftype = str.match(/\.([^.]*$)/)[1] if str.match?(/\.([^.]*$)/)
    # Set special filetypes (sequence matters)
    ftype = "bd" if File.blockdev?(str_path)
    ftype = "cd" if File.chardev?(str_path)
    ftype = "pi" if File.pipe?(str_path)
    ftype = "st" if File.sticky?(str_path)
    ftype = "so" if File.socket?(str_path)
    ftype = "ex" if File.executable?(str_path)
    ftype = "di" if File.directory?(str_path)
    ftype = "ln" if File.symlink?(str_path) 
    begin
      File.stat(str_path) # Checking if not an orphaned link
    rescue
      ftype = "or"        # Set to orphant if no link target
    end
    fg = 7; bold = 0; bg = 0 # Set default color
    fg, bold = get_ls_color(ftype) unless ftype == "" # Color from LS_COLORS
    init_pair(fg, fg, bg)
    file_marker = color_pair(fg)
    file_marker = file_marker | Curses::A_BOLD if bold == 1
    if ix == @index and active
      str = "∶" + str
      file_marker = file_marker | Curses::A_UNDERLINE 
      wixy = win.cury
    else
      str = " " + str
    end
    file_marker = file_marker | Curses::A_REVERSE if @tagged.include?("\"#{Dir.pwd}/#{str_path}\"")
    file_marker = file_marker | Curses::A_BLINK if str.match(/#{@searched}/) and @searched != ""
    File.directory?(str_path) ? dir = "/" : dir = ""
    File.symlink?(str_path) ? link = "@" : link = ""
    str = @fspes[ix] + "  " + str if @lslong
    if str.length > win.maxx - 4
      base_name   = File.basename(str, ".*")
      base_length = base_name.length
      ext_name    = File.extname(str)
      ext_length  = ext_name.length
      nbl = win.maxx - 5 - ext_length # nbl: new_base_length
      str = base_name[0..nbl] + "…" + ext_name
    end
    if !active and ix == win.maxy - 1 # Add indicator of more at bottom @w_r list 
      win << " ..."
      return
    end
    str += link + dir
    win.attron(file_marker) { win << str } # Implement color/bold to the item
    win.clrtoeol
    win << "\n"
    ix += 1; t  += 1
  end
  (win.maxy - win.cury).times {win.deleteln()} # Clear to bottom of window
  if active
    init_pair(242, 242, 0)
    if @index > @w_l.maxy/2
      @w_l.setpos(0, @w_l.maxx - 1)
      @w_l.attron(color_pair(242) | Curses::A_DIM) { @w_l << "∆" }
    end
    if @files.length > @w_l.maxy - 1 and @files.length > @index + @w_l.maxy/2 - 1
      @w_l.setpos(@w_l.maxy - 2, @w_l.maxx - 1)
      @w_l.attron(color_pair(242) | Curses::A_DIM) { @w_l << "∇" }
    end
  end
end
def open_selected() # OPEN SELECTED ITEM (when pressing RIGHT)
  if File.directory?(@selected) # Rescue for permission error
    begin
      @marks["'"] = Dir.pwd
      Dir.chdir(@selected)
    rescue
    end
  else
    begin
      if File.read(@selected).force_encoding("UTF-8").valid_encoding?
        system("exec $EDITOR #{@selected_safe}")
      else
          if @runmailcap
            Thread.new { system("run-mailcap #{@selected_safe}") }
          else
            Thread.new { system("xdg-open #{@selected_safe}") }
          end
        end
      @break = true
    rescue
    end
  end
end
def copy_move_link(type) # COPY OR MOVE TAGGED ITEMS (COPY IF "keep == true")
  @tagged.uniq!
  @tagged.each do | item |
    item = item[1..-2]
    dest = Dir.pwd
    dest += "/" + File.basename(item)
    dest += "1" if File.exist?(dest)
    while File.exist?(dest)
      dest = dest.chop + (dest[-1].to_i + 1).to_s
    end
    begin
      case type
      when "copy"
        FileUtils.cp_r(item, dest)
      when "move"
        FileUtils.mv(item, dest)
      when "link"
        FileUtils.ln_s(item, dest)
      end
    rescue StandardError => err
      w_b_info(err.to_s)
    end
  end
  @tagged = []
end
# RIGHT WINDOW FUNCTIONS 
def w_r_show # SHOW CONTENTS IN THE RIGHT WINDOW
  @w_r.clr                      # First clear the window
  image_show("clear") if @image # Then clear any previously showing image
  @image == false
  begin # Determine the specific programs to open/show content 
    if @w_r.pager > 0
      pager_show 
    elsif File.directory?(@selected)
      ls_cmd  = "ls #{@selected_safe} #{@lsbase} #{@lsall} #{@lsorder} #{@lsinvert} #{@lsuser}"
      @files  = `#{ls_cmd} 2>/dev/null`.split("\n")
      ls_cmd += %q[ -lhgGH --time-style="long-iso" | awk '{printf "%s%12s%6s%6s%5s", $1,$4,$5,$3,$2 "\n"}']
      @fspes  = `#{ls_cmd} 2>/dev/null`.split("\n").drop(1)
      list_dir(false)
    # TEXT 
    elsif File.read(@selected).force_encoding("UTF-8").valid_encoding? and @w_r.pager == 0
      begin # View the file as text if it is utf-8
        @w_r.pager_cmd = "batcat -n --color=always #{@selected_safe} 2>/dev/null"
        @w_r.text      = `batcat -n --color=always --line-range :#{@w_r.maxy} #{@selected_safe} 2>/dev/null`
        pager_start
        syntax_highlight(@w_r.text)
      rescue
        @w_r.pager_cmd  = "cat #{@selected_safe} 2>/dev/null"
        w_r_doc
      end
    # PDF 
    elsif @selected.match(@pdffile) and @w_r.pager == 0
      @w_r.pager_cmd  = "pdftotext #{@selected_safe} - 2>/dev/null | less"
      @w_r.text       = `pdftotext -f 1 -l 4 #{@selected_safe} - 2>/dev/null`
      pager_start 
      @w_r << @w_r.text
    # OPEN/LIBREOFFICE 
    elsif @selected.match(@oolofile) and @w_r.pager == 0
      @w_r.pager_cmd  = "odt2txt #{@selected_safe} 2>/dev/null"
      w_r_doc
    # OOXML 
    elsif @selected.match(@ooxmlfile) and @w_r.pager == 0
      @w_r.pager_cmd  = "docx2txt #{@selected_safe} - 2>/dev/null"
      w_r_doc
    # MS DOC 
    elsif @selected.match(@docfile) and @w_r.pager == 0
      @w_r.pager_cmd  = "catdoc #{@selected_safe} 2>/dev/null"
      w_r_doc
    # MS XLS 
    elsif @selected.match(@xlsfile) and @w_r.pager == 0
      @w_r.pager_cmd  = "xls2csv #{@selected_safe} 2>/dev/null"
      w_r_doc
    # MS PPT 
    elsif @selected.match(@pptfile) and @w_r.pager == 0
      @w_r.pager_cmd  = "catppt #{@selected_safe} 2>/dev/null"
      w_r_doc
    # IMAGES 
    elsif @selected.match(@imagefile)
      image_show(@selected_safe)
      @image = true
    # VIDEOS (THUMBNAILS) 
    elsif @selected.match(/\.mpg$|\.mpeg$|\.avi$|\.mov$|\.mkv$|\.mp4$/)
      begin
        tmpfile = "/tmp/" + File.basename(@selected_safe,".*")
        `ffmpegthumbnailer -s 1200 -i #{@selected_safe} -o /tmp/rtfm_video_tn.jpg`
        image_show("/tmp/rtfm_video_tn.jpg")
        @image = true
      rescue
      end
    end
  rescue
  end
  pager_add_markers # Add page markers, up and/or down
  @w_r.update = false
  @w_r.refresh
end
def w_r_doc # GET FULL CONTENT TO PAGE
  @w_r.text = `#{@w_r.pager_cmd}`
  pager_start 
  @w_r << @w_r.text
end
def w_r_info(info) # SHOW INFO IN THE RIGHT WINDOW
  @w_r.text      = info
  @w_r.pager_cmd = ""
  pager_start
  pager_show
  @w_r.update = false
end
def marks_info # SHOW MARKS IN RIGHT WINDOW
  info = "Marks:\n"
  unless @marks.empty?
    @marks.each do |mark, dir|
      info += "#{mark} = #{dir}\n"
    end
  else
    info += "(none)"
  end
  w_r_info(info)
end
def tagged_info # SHOW THE LIST OF TAGGED ITEMS IN @w_r
  info = "Tagged:\n"
  @tagged.empty? ? info += "(None)" : info += @tagged.join("\n")
  w_r_info(info)
end
def syntax_highlight(input) # BATCAT SYNTAX HIGHLIGHTING
  color_ary  = color_parse(input)
  color_ary.each do | pair |
    begin
      fg   = pair[0].to_i
      text = pair[1]
      text.gsub!(/\t/, '')
      init_pair(fg, fg, 0)
      @w_r.attron(color_pair(fg)) { @w_r << text }
    rescue
    end
  end
end
def image_show(image)# SHOW THE SELECTED IMAGE IN THE RIGHT WINDOW
  # Pass "clear" to clear the window for previous image
  begin
    terminfo    = `xwininfo -id $(xdotool getactivewindow)`
    term_w      = terminfo.match(/Width: (\d+)/)[1].to_i
    term_h      = terminfo.match(/Height: (\d+)/)[1].to_i
    char_w      = term_w / Curses.cols
    char_h      = term_h / Curses.lines
    img_x       = char_w * (Curses.cols/@width + 1)
    img_y       = char_h * 2
    img_max_w   = char_w * (Curses.cols - Curses.cols/@width - 2)
    img_max_h   = char_h * (Curses.lines - 4)
    if image == "clear"
      img_max_w += 2
      img_max_h += 2
      `echo "6;#{img_x};#{img_y};#{img_max_w};#{img_max_h};\n4;\n3;" | #{@w3mimgdisplay}`
    else
      img_w,img_h = `identify -format "%[fx:w]x%[fx:h]" #{image} 2>/dev/null`.split('x')
      img_w       = img_w.to_i
      img_h       = img_h.to_i
      if img_w > img_max_w
        img_h = img_h * img_max_w / img_w 
        img_w = img_max_w
      end
      if img_h > img_max_h
        img_w = img_w * img_max_h / img_h
        img_h = img_max_h
      end
      `echo "0;1;#{img_x};#{img_y};#{img_w};#{img_h};;;;;\"#{image}\"\n4;\n3;" | #{@w3mimgdisplay}`
    end
  rescue
    @w_r << "Error showing image"
  end
end
def pager_start # START PAGING
  @w_r.pager = 1
  if @w_r.text.lines.count > @w_r.maxy - 2
    @w_r.pager_more = true
  end
end
def pager_show # SHOW THE CURRENT PAGE CONTENT
  @w_r.clr
  image_show("clear") if @image
  @image == false
  beg_l = (@w_r.pager - 1) * (@w_r.maxy - 5)
  end_l = beg_l + @w_r.maxy - 2
  input = @w_r.text.lines[beg_l..end_l].join() + "\n"
  input.lines.count > @w_r.maxy - 2 ? @w_r.pager_more = true : @w_r.pager_more = false
  if @w_r.pager_cmd.match(/batcat/)
    syntax_highlight(input)
  else
    @w_r << input
  end
  pager_add_markers
  @w_r.refresh
end
def pager_add_markers # ADD MARKERS TOP/RIGHT & BOTTOM/RIGHT TO SHOW PAGING AS RELEVANT
  if @w_r.pager > 1
    @w_r.setpos(0, @w_r.maxx - 2)
    @w_r << " ∆"
  end
  if @w_r.pager_more
    @w_r.setpos(@w_r.maxy - 1, @w_r.maxx - 2)
    @w_r << " ∇"
  end
end
def var_resets # RESET PAGER VARIABLES
    @pager      = 0
    @pager_more = false
    @pager_cmd  = ""
    @info       = false
end
# BOTTOM WINDOW FUNCTIONS 
def w_b_info(info) # SHOW INFO IN @W_B
  @w_b.clr
  info      = ": for command (use @s for selected item, @t for tagged items)" if info == nil
  info      = info[1..(@w_b.maxx - 3)] + "…" if info.length + 3 > @w_b.maxx 
  info     += " " * (@w_b.maxx - info.length) if info.length < @w_b.maxx
  @w_b.text = info
  @w_b.write
  @w_b.update = false
end
def w_b_getstr(pretext, text) # A SIMPLE READLINE-LIKE ROUTINE
  Curses.curs_set(1)
  Curses.echo
  stk = 0
  @history.insert(stk, text)
  pos = @history[stk].length
  chr = ""
  while chr != "ENTER"
    @w_b.setpos(0,0)
    init_pair(250, 250, 238)
    text = pretext + @history[stk]
    text += " " * (@w_b.maxx - text.length) if text.length < @w_b.maxx
    @w_b.attron(color_pair(250)) { @w_b << text }
    @w_b.setpos(0,pretext.length + pos)
    @w_b.refresh
    chr = getchr
    case chr
    when 'UP'
      unless @w_b.nohistory
        unless stk == @history.length - 1
          stk += 1 
          pos = @history[stk].length
        end
      end
    when 'DOWN'
      unless @w_b.nohistory
        unless stk == 0
          stk -= 1 
          pos = @history[stk].length
        end
      end
    when 'RIGHT'
      pos += 1 unless pos > @history[stk].length
    when 'LEFT'
      pos -= 1 unless pos == 0
    when 'HOME'
      pos = 0
    when 'END'
      pos = @history[stk].length
    when 'DEL'
      @history[stk][pos] = ""
    when 'BACK'
      unless pos == 0
        pos -= 1
        @history[stk][pos] = ""
      end
    when 'WBACK'
      unless pos == 0
        until @history[stk][pos - 1] == " " or pos == 0
          pos -= 1
          @history[stk][pos] = ""
        end
        if @history[stk][pos - 1] == " "
          pos -= 1
          @history[stk][pos] = ""
        end
      end
    when 'LDEL'
      @history[stk] = ""
      pos = 0
    when 'TAB' # Tab completion of dirs and files
      p1 = pos - 1
      c  = @history[stk][0..(p1)].sub(/^.* /, '')
      p0 = p1 - c.length
      compl = File.expand_path(c)
      compl += "/" if Dir.exist?(compl)
      clist = Dir.glob(compl + "*")
      unless compl == clist[0].to_s and clist.length == 1
        if clist.length == 1
          compl = clist[0].to_s
        else
          ix = clist.find_index(compl)
          ix = 0 if ix == nil
          sel_item = ""
          begin
            Curses.curs_set(0)
            Curses.noecho
            @w_r.clr
            @w_r << "Completion list:\n\n"
            clist.each.with_index do |item, index|
              if index == ix
                @w_r.attron(Curses::A_BLINK) { @w_r << item }
                sel_item = item
              else
                @w_r << item
              end
              @w_r << "\n"
            end
            @w_r.refresh
            ix == clist.length ? ix = 0 : ix += 1
          end while getchr == 'TAB'
          compl = sel_item
          @w_r.clr
          Curses.curs_set(1)
          Curses.echo
        end
      end
      @history[stk].sub!(c,compl)
      pos = pos - c.length + compl.length
    when /^.$/
      @history[stk].insert(pos,chr)
      pos += 1
    end
  end
  curstr = @history[stk]
  @history.shift if @w_b.nohistory
  unless @w_b.nohistory
    @history.uniq!
    @history.compact!
    @history.delete("")
  end
  Curses.curs_set(0)
  Curses.noecho
  return curstr
end
def w_b_exec(cmd) # EXECUTE COMMAND FROM @W_B
  # Subsitute any '@s' with the selected item, @t with tagged items
  # 'rm @s' deletes the selected item, 'rm @t' deletes tagged items
  return if cmd == ""
  @s = "\"#{Dir.pwd}/#{@selected}\""
  cmd.gsub!(/@s/, @s)
  @t = @tagged.join(" ")
  cmd.gsub!(/@t/, @t)
  if cmd.match(/^cd /)
    cmd.sub!(/^cd (\S*).*/, '\1')
    Dir.chdir(cmd) if Dir.exist?(cmd)
    return
  end
  begin
    begin
      @w_r.pager_cmd = "#{cmd} | batcat -n --color=always 2>/dev/null"
      @w_r.text = `#{@w_r.pager_cmd}`
    rescue
      @w_r.text = `#{cmd} 2>/dev/null`
    end
    unless @w_r.text == "" or @w_r.text == nil
      pager_start
      pager_show
      @w_r.update = false
    end
  rescue
    w_b_info(" Failed to execute command (#{cmd})")
  end
end

# MAIN PROGRAM 
loop do # OUTER LOOP - CATCHING REFRESHES VIA 'r'
  @break = false # Initialize @break variable (set if user hits 'r')
  @image = false # Set the image flag to false (set if image is displayed in @w_r)
  @tag   = false # Set pattern tagging to nothing
  begin # Create the four windows/panels 
    if @border
      Curses.stdscr.bg = 236 # Use for borders
      Curses.stdscr.fill
    else
      Curses.stdscr.clear
      Curses.stdscr.refresh
    end
    maxx = Curses.cols
    maxy = Curses.lines
    # Curses::Window.new(h,w,y,x)
    @w_t = Curses::Window.new(1, 0, 0, 0)
    @w_b = Curses::Window.new(1, 0, maxy - 1, 0)
    @w_l = Curses::Window.new(maxy - 3, (maxx/@width) - 1, 2, 0)
    @w_r = Curses::Window.new(maxy - 4, maxx - (maxx/@width), 2, maxx/@width)
    @w_t.fg, @w_t.bg = 232, 249
    @w_t.attr        = Curses::A_BOLD
    @w_b.fg, @w_b.bg = 250, 238
    @w_t.update = true
    @w_b.update = true
    @w_l.update = true
    @w_r.update = true
    @w_r.pager  = 0
    @w_r.pager_more = false
    dir_old     = Dir.pwd
    lsall_old   = @lsall
    unless @tagged.empty?
      tagged_info
      @w_r.update = false
    end
    loop do # INNER, CORE LOOP 
      system("printf \"\033]0;RTFM: #{Dir.pwd}\007\"")   # Set Window title to path 
      ls_cmd  = "ls #{@lsbase} #{@lsall} #{@lsorder} #{@lsinvert} #{@lsuser}" # Get files in current directory 
      @files  = `#{ls_cmd} 2>/dev/null`.split("\n")
      ls_cmd += %q[ -lhgG --time-style="long-iso" | awk '{printf "%s%12s%6s%6s%5s", $1,$4,$5,$3,$2 "\n"}']
      @fspes  = `#{ls_cmd} 2>/dev/null`.split("\n").drop(1)
      if Dir.pwd != dir_old
        if @directory.key?(Dir.pwd)
          @selected = @directory[Dir.pwd]
          @index    = @files.index(@selected)
        else
          @index    = 0
        end
      end
      dir_old = Dir.pwd
      @index     = 0 if @index == nil
      index_old  = @index
      @index     = @files.index(@selected) if @lsall != lsall_old # Change in showing all items must be handled
      @index     = index_old if @files.index(@selected) == nil    # If item no longer is shown
      @min_index = 0
      @max_index = @files.size - 1
      @index     = @max_index if @index > @max_index  # If deleted many items
      @index     = 0 if @index < 0
      @selected      = @files[@index]                 # Get text of selected item
      @selected_safe = "\"#{@selected}\""             # Make it safe for commands
      # Top window (info line) 
      w_t_info
      # Bottom window (command line) Before @w_r to avoid image dropping out on startup
      w_b_info(nil) if @w_b.update
      @w_b.update = true
      # Left and right windows (browser & content viewer)
      @w_l.setpos(0,0)
      list_dir(true)
      @w_l.refresh
      w_r_show if @w_r.update and @preview
      Curses.curs_set(1) # Clear residual cursor
      Curses.curs_set(0) # ...from editing files 
      @tag = false       # Clear tag pattern
      lsall_old = @lsall
      main_getkey        # Get key from user 
      break if @break    # Break to outer loop, redrawing windows, if user hit 'r'
      break if Curses.cols != maxx or Curses.lines != maxy # break on terminal resize 
    end
  ensure # On exit: close curses, clear terminal 
    @write_conf_all = false
    conf_write if @write_conf # Write marks to config file
    image_show("clear")
    close_screen
    # If launched via the script "r", return current dir and "r" will cd to that
    File.write(ARGV[0], Dir.pwd) if ARGV[0] and ARGV[0].match(/\/tmp\/tmp/)
  end
end

# vim: set sw=2 sts=2 et fdm=syntax fdn=2 fcs=fold\:\ :
